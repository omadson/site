{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"blog/","text":"Blog {{ blog_content }}","title":"Blog"},{"location":"blog/#blog","text":"{{ blog_content }}","title":"Blog"},{"location":"blog/tags/","text":"Tags {{ tag_content }}","title":"Tags"},{"location":"blog/tags/#tags","text":"{{ tag_content }}","title":"Tags"},{"location":"blog/2022/anagrams/","tags":["python","anagrams","programming"],"text":"disclaimer N\u00e3o espere encontrar algoritmos que v\u00e3o salvar sua vida. Eu vou postar aqui algoritmos que acho interessante, mas isso n\u00e3o quer dizer que eles s\u00e3o poderosos ou que fazem coisas interessantes. Possivelmente sempre vai ser um algoritmo que faz uma coisa simples de que de um jeito complexo, mas interessante. Pr\u00f3logo Dias atr\u00e1s eu estava entediado olhando o twitter da biblioteca de Fermat ( Fermat's Library ) e me deparei com um antigo tu\u00edte que me chamou bastante aten\u00e7\u00e3o. Ele continha um \"algoritmo inteligente para descobrir se duas palavras s\u00e3o ou n\u00e3o anagramas. Um anagrama \u00e9 uma palavra ou frase formada reorganizando as letras de uma palavra ou frase diferente, normalmente usando todas as letras originais exatamente uma vez 1 . O tal algoritmo foi descrito a partir da Figura {#fig_algorithm}. Que, em tradu\u00e7\u00e3o livre, Algoritmo inteligente para descobrir se duas palavras s\u00e3o ou n\u00e3o anagramas Mapei cada um dos 26 caracteres da lingua inglesa. A, B, C, D... para um n\u00famero primo. Ent\u00e3o, multiplique os caracteres de cada palavra. Como todo n\u00famero inteiro \u00e9 um n\u00famero primo ou um produto \u00fanico de primos (teorema fundamental da aritm\u00e9tica), duas palavras s\u00e3o anagramas se seus produtos forem os mesmos. Por exemplo. Considere que F(\\texttt{a}) = 2 F(\\texttt{a}) = 2 , F(\\texttt{e}) = 5 F(\\texttt{e}) = 5 e F(\\texttt{r}) = 7 F(\\texttt{r}) = 7 . Temos ent\u00e3o, que \\begin{align*} F(\\texttt{are}) &= 2 \\times 7 \\times 5 = 70 \\\\ F(\\texttt{ear}) &= 5 \\times 2 \\times 7 = 70 \\\\ \\end{align*} \\begin{align*} F(\\texttt{are}) &= 2 \\times 7 \\times 5 = 70 \\\\ F(\\texttt{ear}) &= 5 \\times 2 \\times 7 = 70 \\\\ \\end{align*} By @fermatslibrary Que convenhamos, \u00e9 um algoritmo interessante, por\u00e9m nada eficiente (conversaremos sobre sua complexidade computacional mais adiante). Todavia, eu resolvi implement\u00e1-lo usando (claro) Python. Parece simples, teriamos que (primeiro) converter cada palavra em seu correspondente produto de primos: mapear cada letra do alfabeto para um n\u00famero primo substituir cada letra da palavra (ou frase) pelo correspondente primo multiplicar os n\u00fameros. E, comparar os dois valores. Se forem iguais, s\u00e3o anagramas. Caso contr\u00e1rio n\u00e3o o s\u00e3o. Buscando uma solu\u00e7\u00e3o elegante Para mapear cada letra do alfabeto para um n\u00famero primo, criaremos uma fun\u00e7\u00e3o letter_to_prime que recebe uma letra, encontra a posi\u00e7\u00e3o dela no alfabeto e retorna o n\u00famero primo correspondente. Em python, 1 2 3 4 5 6 7 8 9 letters = 'abcdefghijklmnopqrstuvwxyz' primes = [ 2 , 3 , 5 , 7 , 11 , 13 , 17 , 19 , 23 , 29 , 31 , 37 , 41 , 43 , 47 , 53 , 59 , 61 , 67 , 71 , 73 , 79 , 83 , 89 , 97 , 101 ] def letter_to_prime ( letter ): return primes [ letters . index ( letter )] Bem, seria uma sa\u00edda, n\u00e3o a melhor, mas seria. Particularmente, eu n\u00e3o gostei de ter digitado todos os 26 26 n\u00fameros primos que necessitava, queria algo que fizesse isso por mim (eu poderia ter digitado algum n\u00famero errado). Gera\u00e7\u00e3o de n\u00fameros primos Lembrei ent\u00e3o que conhecia uma f\u00f3rmula pra gerar n\u00fameros primos. Ela funcionava de 0 0 at\u00e9 39 39 , eu s\u00f3 precisava que funcionasse de 0 0 at\u00e9 25 25 , ent\u00e3o estava \u00f3timo. A equa\u00e7\u00e3o era a seguinte: P(n) = n^2 + n + 42. \\label{eq_antiga} P(n) = n^2 + n + 42. \\label{eq_antiga} Dessa forma, eu poderia refatorar meu c\u00f3digo para 1 2 3 4 5 6 7 8 9 letters = 'abcdefghijklmnopqrstuvwxyz' def primes ( n ) return n ** 2 + n + 42 def letter_to_prime ( letter ): return primes ( letters . index ( letter )) \u00c9, gostei mais dessa vers\u00e3o, mas ainda n\u00e3o estava satisfeito. Resolvi ent\u00e3o, pesquisar sobre f\u00f3rmulas mais interessantes para gera\u00e7\u00e3o de n\u00fameros primos e encontrei uma p\u00e1gina da wikipedia que trata especificamente sobre isso . Lendo esta p\u00e1gina, descobri o teorema de Green-Tao 2 , em suma, o que ele diz \u00e9 que existem progress\u00f5es aritm\u00e9ticas iteiramente compostas por n\u00fameros primos. Info Uma progress\u00e3o aritm\u00e9tica \u00e9 uma sequ\u00eancia num\u00e9rica em que cada termo, a partir do segundo, \u00e9 igual \u00e0 soma do termo anterior com uma constante. Os N\u00fameros primos s\u00e3o n\u00fameros naturais maiores do que 1 que possuem somente dois divisores, ou seja, s\u00e3o divis\u00edveis por 1 e por ele mesmo. Al\u00e9m disso, descobri que o resultado mais conhecido \u00e9 uma progress\u00e3o aritm\u00e9tica de 26 26 n\u00fameros (exatamente o que precisava) 3 , gerada pela sequinte equa\u00e7\u00e3o: L(n) = 43142746595714191 + 5283234035979900n. \\label{eq_green_tao} L(n) = 43142746595714191 + 5283234035979900n. \\label{eq_green_tao} N\u00e3o sei voc\u00ea, mas eu gostei muito mais da segunda equa\u00e7\u00e3o do da primeira. Al\u00e9m disso, parece que ela se encaixa perfeitamente com o que a gente precisa (apenas 26 n\u00fameros n\u00fameros primos). Vou mudar o c\u00f3digo para que ele use a nova equa\u00e7\u00e3o. Al\u00e9m disso, vou utilizar a biblioteca string para evitar de digitar algum caractere errado. Dessa forma, o c\u00f3digo ficou: 1 2 3 4 5 6 7 8 9 from string import ascii_lowercase as letters def primes ( n ): return 43142746595714191 + 5283234035979900 * n def letter_to_prime ( letter ): return primes ( letters . index ( letter )) \u00d3timo, achei uma fun\u00e7\u00e3o que me agradava. Agora s\u00f3 precisava resolver os pontos 2 e 3 (substituir cada letra pelo correspondente primo e multiplicar os n\u00fameros). Multiplica\u00e7\u00e3o de valores em uma cadeia O ponto 2 poderia facilmente ser solucionado usando list comprehensions e o ponto 3 poderia ser resolvido utilizando um for . Dessa forma, teriamos o seguinte c\u00f3digo: 1 2 3 4 5 6 def word_to_prod ( word ): prime_numbers = [ letter_to_prime ( letter ) for letter in word ] result = 1 for prime in prime_numbers : result *= result return result Info list comprehensions \u00e9 uma forma concisa de criar e manipular listas em Python T\u00e1, talvez eu seja dif\u00edcil de agradar. N\u00e3o fiquei nada satisfeito com esse c\u00f3digo. Talvez pudesse usar uma fun\u00e7\u00e3o de uma biblioteca padr\u00e3o do python. Pesquisei e encontrei duas formas alternativas ao c\u00f3digo anterior. A primeira dela utiliza reduce e a segunda maneira utiliza um m\u00e9todo prod da biblioteca math . Dessa forma, meu c\u00f3digo pode ser refatorado para 1 2 3 4 5 6 from functools import reduce def word_to_prod ( word ): prime_numbers = [ letter_to_prime ( letter ) for letter in word ] return reduce ( lambda x , y : x * y , prime_numbers ) ou 1 2 3 4 5 6 from math import prod def word_to_prod ( word ): prime_numbers = [ letter_to_prime ( letter ) for letter in word ] return prod ( prime_numbers ) S\u00e3o solu\u00e7\u00f5es legais, mas eu n\u00e3o estava muito interessado em performace. Resolvi ent\u00e3o tentar algo um pouco heterodoxo e usar recurs\u00e3o pra resolver os dois ponto de uma vez s\u00f3. Como a fun\u00e7\u00e3o letter_to_prime s\u00f3 funciona para um elemento, eu poderia usar o caso base a cadeia ter tamanho 1 1 e dividir a lista em dois peda\u00e7os. O primeiro com apenas um elemento e o segundo com o restante da cadeia. Multiplicaria esses dois valores (pasando pela fun\u00e7\u00e3o novamente) e voil\u00e0 : 1 2 3 4 def word_to_prod ( word ): if len ( word ) == 1 : return letter_to_prime ( word ) return word_to_prod ( word [ 0 ]) * word_to_prod ( word [ 1 :]) Agora sim, me pareceu um c\u00f3digo digno desse algoritmo. Solu\u00e7\u00e3o final Bem, agora eu poderia juntar tudo e adicionar tamb\u00e9m uma fun\u00e7\u00e3o para comparar se duas palavras s\u00e3o anagramas. Como dito anteriormente, s\u00f3 \u00e9 necess\u00e1rio comparar os dois valores. Se forem iguais, s\u00e3o anagramas. Caso contr\u00e1rio n\u00e3o o s\u00e3o. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 from string import ascii_lowercase as letters def primes ( n ): return 43142746595714191 + 5283234035979900 * n def letter_to_prime ( letter ): return primes ( letters . index ( letter )) def word_to_prod ( word ): if len ( word ) == 1 : return letter_to_prime ( word ) return word_to_prod ( word [ 0 ]) * word_to_prod ( word [ 1 :]) def are_anagram ( word_1 , word_2 ): if word_to_prod ( word_1 ) == word_to_prod ( word_2 ): return True return False Resolvi colocar a l\u00f3gica da fun\u00e7\u00e3o letter_to_prime dentro da fun\u00e7\u00e3o word_to_prod e inserir uma linha de c\u00f3digo para remover espa\u00e7os entre as palavras e deixar tudo em lowercase , caso queira utilizar frases. O c\u00f3digo final \u00e9: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 from string import ascii_lowercase as letters def primes ( n ): return 43142746595714191 + 5283234035979900 * n def word_to_prod ( word ): word = word . replace ( ' ' , '' ) . lower () if len ( word ) == 1 : return primes ( letters . index ( word )) return word_to_prod ( word [ 0 ]) * word_to_prod ( word [ 1 :]) def are_anagram ( word_1 , word_2 ): if word_to_prod ( word_1 ) == word_to_prod ( word_2 ): return True return False Agora sim, acho que est\u00e1 completo, ent\u00e3o salvei ent\u00e3o como prime_anagrams.py . Para testar \u00e9 s\u00f3 importar e chamar a fun\u00e7\u00e3o are_anagram . 1 2 3 4 5 6 from prime_anagrams import are_anagram print ( are_anagram ( 'silent' , 'listen' )) print ( are_anagram ( 'foo' , 'bar' )) print ( are_anagram ( 'William Shakespeare' , 'I am a weakish speller' )) Bem, convenhamos, \u00e9 uma solu\u00e7\u00e3o engra\u00e7ada. Computacionalmente falando ela \u00e9 terrivel, mas foi divertido. Em falar em custo computacional, eu encontrei uma discurss\u00e3o sobre o custo computacional dessa solu\u00e7\u00e3o. Custo computacional Segundo o 4 , usu\u00e1rio do reddit , considerando n n o comprimento das cadeias, o tempo de execu\u00e7\u00e3o final acaba sendo \\mathcal{O}(n^2) \\mathcal{O}(n^2) . Al\u00e9m disso, existe um algoritmo \\mathcal{O}(n + s) \\mathcal{O}(n + s) que se baseia em tornar uma matriz indexada pelas s s letras poss\u00edveis e, em seguida, verificar se as duas sequ\u00eancias t\u00eam a mesma contagem de cada letra. Outras solu\u00e7\u00f5es Resolvi ent\u00e3o procurar outras solu\u00e7\u00f5es pra testar se duas palavras (ou frases) s\u00e3o anagramas. Encontrei duas solu\u00e7\u00f5es simples e conhecidas para esse problema. Usando ordena\u00e7\u00e3o A primeira delas, seria ordenar as cadeias de caracteres e comparar se as cadeias ordenadas s\u00e3o iguais. Caso forem, \u00e9 um anagrama. Em python isso seria 1 2 3 4 5 6 7 def are_anagram ( word_1 , word_2 ): word_1 = word_1 . replace ( ' ' , '' ) . lower () word_2 = word_2 . replace ( ' ' , '' ) . lower () if sorted ( word_1 ) == sorted ( word_2 ): return True return False Considerando n n , o tamanho das cadeias de caracteres, o custo computacional dessa solu\u00e7\u00e3o \u00e9 equivalente ao de uma ordena\u00e7\u00e3o \\mathcal{O}(n \\log n) \\mathcal{O}(n \\log n) . Usando contagem de caracteres Outra solu\u00e7\u00e3o seria (como mencionado por xanilax 4 ) tornar uma matriz indexada pelas s s letras poss\u00edveis e, em seguida, verificar se as duas sequ\u00eancias t\u00eam a mesma contagem de cada letra. 1 2 3 4 5 6 7 8 9 10 from collections import Counter def are_anagram ( word_1 , word_2 ): word_1 = word_1 . replace ( ' ' , '' ) . lower () word_2 = word_2 . replace ( ' ' , '' ) . lower () if Counter ( word_1 ) == Counter ( word_2 ): return True return False Considerando n n , o tamanho das cadeias de caracteres, o custo computacional dessa solu\u00e7\u00e3o \u00e9 \\mathcal{O}(n + s) \\mathcal{O}(n + s) . Conclus\u00e3o Bem, acho que \u00e9 isso. Foi s\u00f3 um grande devaneio sobre n\u00fameros primos e anagramas. Tem dias que realmente estou entediado e depois de algumas horas nem sei mais onde fui parar. Sobre as solu\u00e7\u00f5es apresentadas no final, tab\u00e9m n\u00e3o sei se s\u00e3o as melhores alternativas, mas garanto que a utilizando n\u00fameros primos \u00e9 a mais pomposa. Espero que tenha gostado da leitura. #python #anagrams #programming .md-typeset .blogging-tags-grid { display: flex; flex-direction: row; flex-wrap: wrap; gap: 8px; margin-top: 5px; } .md-typeset .blogging-tag { color: var(--md-typeset-color); background-color: var(--md-typeset-code-color); } .md-typeset .blogging-tag code { border-radius: 5px; } Wikipedia. Anagram \u2013 wikipedia, the free encyclopedia. April 2020. URL: https://en.wikipedia.org/wiki/Anagram . \u21a9 Wikipedia. Green\u2013tao theorem \u2013 wikipedia, the free encyclopedia. April 2020. URL: https://en.wikipedia.org/wiki/Green%E2%80%93Tao_theorem . \u21a9 Wikipedia. Formula for primes \u2013 wikipedia, the free encyclopedia. April 2020. URL: https://en.wikipedia.org/wiki/Formula_for_primes . \u21a9 xanilax. Comment on 'clever algorithm to determine whether or not two words are anagrams'. June 2017. URL: shorturl.at/jqwI2 . \u21a9 \u21a9","title":"Um algoritmo inteligente para descobrir se duas palavras s\u00e3o ou n\u00e3o anagramas"},{"location":"blog/2022/anagrams/#prologo","text":"Dias atr\u00e1s eu estava entediado olhando o twitter da biblioteca de Fermat ( Fermat's Library ) e me deparei com um antigo tu\u00edte que me chamou bastante aten\u00e7\u00e3o. Ele continha um \"algoritmo inteligente para descobrir se duas palavras s\u00e3o ou n\u00e3o anagramas. Um anagrama \u00e9 uma palavra ou frase formada reorganizando as letras de uma palavra ou frase diferente, normalmente usando todas as letras originais exatamente uma vez 1 . O tal algoritmo foi descrito a partir da Figura {#fig_algorithm}. Que, em tradu\u00e7\u00e3o livre, Algoritmo inteligente para descobrir se duas palavras s\u00e3o ou n\u00e3o anagramas Mapei cada um dos 26 caracteres da lingua inglesa. A, B, C, D... para um n\u00famero primo. Ent\u00e3o, multiplique os caracteres de cada palavra. Como todo n\u00famero inteiro \u00e9 um n\u00famero primo ou um produto \u00fanico de primos (teorema fundamental da aritm\u00e9tica), duas palavras s\u00e3o anagramas se seus produtos forem os mesmos. Por exemplo. Considere que F(\\texttt{a}) = 2 F(\\texttt{a}) = 2 , F(\\texttt{e}) = 5 F(\\texttt{e}) = 5 e F(\\texttt{r}) = 7 F(\\texttt{r}) = 7 . Temos ent\u00e3o, que \\begin{align*} F(\\texttt{are}) &= 2 \\times 7 \\times 5 = 70 \\\\ F(\\texttt{ear}) &= 5 \\times 2 \\times 7 = 70 \\\\ \\end{align*} \\begin{align*} F(\\texttt{are}) &= 2 \\times 7 \\times 5 = 70 \\\\ F(\\texttt{ear}) &= 5 \\times 2 \\times 7 = 70 \\\\ \\end{align*} By @fermatslibrary Que convenhamos, \u00e9 um algoritmo interessante, por\u00e9m nada eficiente (conversaremos sobre sua complexidade computacional mais adiante). Todavia, eu resolvi implement\u00e1-lo usando (claro) Python. Parece simples, teriamos que (primeiro) converter cada palavra em seu correspondente produto de primos: mapear cada letra do alfabeto para um n\u00famero primo substituir cada letra da palavra (ou frase) pelo correspondente primo multiplicar os n\u00fameros. E, comparar os dois valores. Se forem iguais, s\u00e3o anagramas. Caso contr\u00e1rio n\u00e3o o s\u00e3o.","title":"Pr\u00f3logo"},{"location":"blog/2022/anagrams/#buscando-uma-solucao-elegante","text":"Para mapear cada letra do alfabeto para um n\u00famero primo, criaremos uma fun\u00e7\u00e3o letter_to_prime que recebe uma letra, encontra a posi\u00e7\u00e3o dela no alfabeto e retorna o n\u00famero primo correspondente. Em python, 1 2 3 4 5 6 7 8 9 letters = 'abcdefghijklmnopqrstuvwxyz' primes = [ 2 , 3 , 5 , 7 , 11 , 13 , 17 , 19 , 23 , 29 , 31 , 37 , 41 , 43 , 47 , 53 , 59 , 61 , 67 , 71 , 73 , 79 , 83 , 89 , 97 , 101 ] def letter_to_prime ( letter ): return primes [ letters . index ( letter )] Bem, seria uma sa\u00edda, n\u00e3o a melhor, mas seria. Particularmente, eu n\u00e3o gostei de ter digitado todos os 26 26 n\u00fameros primos que necessitava, queria algo que fizesse isso por mim (eu poderia ter digitado algum n\u00famero errado).","title":"Buscando uma solu\u00e7\u00e3o elegante"},{"location":"blog/2022/anagrams/#geracao-de-numeros-primos","text":"Lembrei ent\u00e3o que conhecia uma f\u00f3rmula pra gerar n\u00fameros primos. Ela funcionava de 0 0 at\u00e9 39 39 , eu s\u00f3 precisava que funcionasse de 0 0 at\u00e9 25 25 , ent\u00e3o estava \u00f3timo. A equa\u00e7\u00e3o era a seguinte: P(n) = n^2 + n + 42. \\label{eq_antiga} P(n) = n^2 + n + 42. \\label{eq_antiga} Dessa forma, eu poderia refatorar meu c\u00f3digo para 1 2 3 4 5 6 7 8 9 letters = 'abcdefghijklmnopqrstuvwxyz' def primes ( n ) return n ** 2 + n + 42 def letter_to_prime ( letter ): return primes ( letters . index ( letter )) \u00c9, gostei mais dessa vers\u00e3o, mas ainda n\u00e3o estava satisfeito. Resolvi ent\u00e3o, pesquisar sobre f\u00f3rmulas mais interessantes para gera\u00e7\u00e3o de n\u00fameros primos e encontrei uma p\u00e1gina da wikipedia que trata especificamente sobre isso . Lendo esta p\u00e1gina, descobri o teorema de Green-Tao 2 , em suma, o que ele diz \u00e9 que existem progress\u00f5es aritm\u00e9ticas iteiramente compostas por n\u00fameros primos. Info Uma progress\u00e3o aritm\u00e9tica \u00e9 uma sequ\u00eancia num\u00e9rica em que cada termo, a partir do segundo, \u00e9 igual \u00e0 soma do termo anterior com uma constante. Os N\u00fameros primos s\u00e3o n\u00fameros naturais maiores do que 1 que possuem somente dois divisores, ou seja, s\u00e3o divis\u00edveis por 1 e por ele mesmo. Al\u00e9m disso, descobri que o resultado mais conhecido \u00e9 uma progress\u00e3o aritm\u00e9tica de 26 26 n\u00fameros (exatamente o que precisava) 3 , gerada pela sequinte equa\u00e7\u00e3o: L(n) = 43142746595714191 + 5283234035979900n. \\label{eq_green_tao} L(n) = 43142746595714191 + 5283234035979900n. \\label{eq_green_tao} N\u00e3o sei voc\u00ea, mas eu gostei muito mais da segunda equa\u00e7\u00e3o do da primeira. Al\u00e9m disso, parece que ela se encaixa perfeitamente com o que a gente precisa (apenas 26 n\u00fameros n\u00fameros primos). Vou mudar o c\u00f3digo para que ele use a nova equa\u00e7\u00e3o. Al\u00e9m disso, vou utilizar a biblioteca string para evitar de digitar algum caractere errado. Dessa forma, o c\u00f3digo ficou: 1 2 3 4 5 6 7 8 9 from string import ascii_lowercase as letters def primes ( n ): return 43142746595714191 + 5283234035979900 * n def letter_to_prime ( letter ): return primes ( letters . index ( letter )) \u00d3timo, achei uma fun\u00e7\u00e3o que me agradava. Agora s\u00f3 precisava resolver os pontos 2 e 3 (substituir cada letra pelo correspondente primo e multiplicar os n\u00fameros).","title":"Gera\u00e7\u00e3o de n\u00fameros primos"},{"location":"blog/2022/anagrams/#multiplicacao-de-valores-em-uma-cadeia","text":"O ponto 2 poderia facilmente ser solucionado usando list comprehensions e o ponto 3 poderia ser resolvido utilizando um for . Dessa forma, teriamos o seguinte c\u00f3digo: 1 2 3 4 5 6 def word_to_prod ( word ): prime_numbers = [ letter_to_prime ( letter ) for letter in word ] result = 1 for prime in prime_numbers : result *= result return result Info list comprehensions \u00e9 uma forma concisa de criar e manipular listas em Python T\u00e1, talvez eu seja dif\u00edcil de agradar. N\u00e3o fiquei nada satisfeito com esse c\u00f3digo. Talvez pudesse usar uma fun\u00e7\u00e3o de uma biblioteca padr\u00e3o do python. Pesquisei e encontrei duas formas alternativas ao c\u00f3digo anterior. A primeira dela utiliza reduce e a segunda maneira utiliza um m\u00e9todo prod da biblioteca math . Dessa forma, meu c\u00f3digo pode ser refatorado para 1 2 3 4 5 6 from functools import reduce def word_to_prod ( word ): prime_numbers = [ letter_to_prime ( letter ) for letter in word ] return reduce ( lambda x , y : x * y , prime_numbers ) ou 1 2 3 4 5 6 from math import prod def word_to_prod ( word ): prime_numbers = [ letter_to_prime ( letter ) for letter in word ] return prod ( prime_numbers ) S\u00e3o solu\u00e7\u00f5es legais, mas eu n\u00e3o estava muito interessado em performace. Resolvi ent\u00e3o tentar algo um pouco heterodoxo e usar recurs\u00e3o pra resolver os dois ponto de uma vez s\u00f3. Como a fun\u00e7\u00e3o letter_to_prime s\u00f3 funciona para um elemento, eu poderia usar o caso base a cadeia ter tamanho 1 1 e dividir a lista em dois peda\u00e7os. O primeiro com apenas um elemento e o segundo com o restante da cadeia. Multiplicaria esses dois valores (pasando pela fun\u00e7\u00e3o novamente) e voil\u00e0 : 1 2 3 4 def word_to_prod ( word ): if len ( word ) == 1 : return letter_to_prime ( word ) return word_to_prod ( word [ 0 ]) * word_to_prod ( word [ 1 :]) Agora sim, me pareceu um c\u00f3digo digno desse algoritmo.","title":"Multiplica\u00e7\u00e3o de valores em uma cadeia"},{"location":"blog/2022/anagrams/#solucao-final","text":"Bem, agora eu poderia juntar tudo e adicionar tamb\u00e9m uma fun\u00e7\u00e3o para comparar se duas palavras s\u00e3o anagramas. Como dito anteriormente, s\u00f3 \u00e9 necess\u00e1rio comparar os dois valores. Se forem iguais, s\u00e3o anagramas. Caso contr\u00e1rio n\u00e3o o s\u00e3o. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 from string import ascii_lowercase as letters def primes ( n ): return 43142746595714191 + 5283234035979900 * n def letter_to_prime ( letter ): return primes ( letters . index ( letter )) def word_to_prod ( word ): if len ( word ) == 1 : return letter_to_prime ( word ) return word_to_prod ( word [ 0 ]) * word_to_prod ( word [ 1 :]) def are_anagram ( word_1 , word_2 ): if word_to_prod ( word_1 ) == word_to_prod ( word_2 ): return True return False Resolvi colocar a l\u00f3gica da fun\u00e7\u00e3o letter_to_prime dentro da fun\u00e7\u00e3o word_to_prod e inserir uma linha de c\u00f3digo para remover espa\u00e7os entre as palavras e deixar tudo em lowercase , caso queira utilizar frases. O c\u00f3digo final \u00e9: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 from string import ascii_lowercase as letters def primes ( n ): return 43142746595714191 + 5283234035979900 * n def word_to_prod ( word ): word = word . replace ( ' ' , '' ) . lower () if len ( word ) == 1 : return primes ( letters . index ( word )) return word_to_prod ( word [ 0 ]) * word_to_prod ( word [ 1 :]) def are_anagram ( word_1 , word_2 ): if word_to_prod ( word_1 ) == word_to_prod ( word_2 ): return True return False Agora sim, acho que est\u00e1 completo, ent\u00e3o salvei ent\u00e3o como prime_anagrams.py . Para testar \u00e9 s\u00f3 importar e chamar a fun\u00e7\u00e3o are_anagram . 1 2 3 4 5 6 from prime_anagrams import are_anagram print ( are_anagram ( 'silent' , 'listen' )) print ( are_anagram ( 'foo' , 'bar' )) print ( are_anagram ( 'William Shakespeare' , 'I am a weakish speller' )) Bem, convenhamos, \u00e9 uma solu\u00e7\u00e3o engra\u00e7ada. Computacionalmente falando ela \u00e9 terrivel, mas foi divertido. Em falar em custo computacional, eu encontrei uma discurss\u00e3o sobre o custo computacional dessa solu\u00e7\u00e3o.","title":"Solu\u00e7\u00e3o final"},{"location":"blog/2022/anagrams/#custo-computacional","text":"Segundo o 4 , usu\u00e1rio do reddit , considerando n n o comprimento das cadeias, o tempo de execu\u00e7\u00e3o final acaba sendo \\mathcal{O}(n^2) \\mathcal{O}(n^2) . Al\u00e9m disso, existe um algoritmo \\mathcal{O}(n + s) \\mathcal{O}(n + s) que se baseia em tornar uma matriz indexada pelas s s letras poss\u00edveis e, em seguida, verificar se as duas sequ\u00eancias t\u00eam a mesma contagem de cada letra.","title":"Custo computacional"},{"location":"blog/2022/anagrams/#outras-solucoes","text":"Resolvi ent\u00e3o procurar outras solu\u00e7\u00f5es pra testar se duas palavras (ou frases) s\u00e3o anagramas. Encontrei duas solu\u00e7\u00f5es simples e conhecidas para esse problema.","title":"Outras solu\u00e7\u00f5es"},{"location":"blog/2022/anagrams/#usando-ordenacao","text":"A primeira delas, seria ordenar as cadeias de caracteres e comparar se as cadeias ordenadas s\u00e3o iguais. Caso forem, \u00e9 um anagrama. Em python isso seria 1 2 3 4 5 6 7 def are_anagram ( word_1 , word_2 ): word_1 = word_1 . replace ( ' ' , '' ) . lower () word_2 = word_2 . replace ( ' ' , '' ) . lower () if sorted ( word_1 ) == sorted ( word_2 ): return True return False Considerando n n , o tamanho das cadeias de caracteres, o custo computacional dessa solu\u00e7\u00e3o \u00e9 equivalente ao de uma ordena\u00e7\u00e3o \\mathcal{O}(n \\log n) \\mathcal{O}(n \\log n) .","title":"Usando ordena\u00e7\u00e3o"},{"location":"blog/2022/anagrams/#usando-contagem-de-caracteres","text":"Outra solu\u00e7\u00e3o seria (como mencionado por xanilax 4 ) tornar uma matriz indexada pelas s s letras poss\u00edveis e, em seguida, verificar se as duas sequ\u00eancias t\u00eam a mesma contagem de cada letra. 1 2 3 4 5 6 7 8 9 10 from collections import Counter def are_anagram ( word_1 , word_2 ): word_1 = word_1 . replace ( ' ' , '' ) . lower () word_2 = word_2 . replace ( ' ' , '' ) . lower () if Counter ( word_1 ) == Counter ( word_2 ): return True return False Considerando n n , o tamanho das cadeias de caracteres, o custo computacional dessa solu\u00e7\u00e3o \u00e9 \\mathcal{O}(n + s) \\mathcal{O}(n + s) .","title":"Usando contagem de caracteres"},{"location":"blog/2022/anagrams/#conclusao","text":"Bem, acho que \u00e9 isso. Foi s\u00f3 um grande devaneio sobre n\u00fameros primos e anagramas. Tem dias que realmente estou entediado e depois de algumas horas nem sei mais onde fui parar. Sobre as solu\u00e7\u00f5es apresentadas no final, tab\u00e9m n\u00e3o sei se s\u00e3o as melhores alternativas, mas garanto que a utilizando n\u00fameros primos \u00e9 a mais pomposa. Espero que tenha gostado da leitura. #python #anagrams #programming .md-typeset .blogging-tags-grid { display: flex; flex-direction: row; flex-wrap: wrap; gap: 8px; margin-top: 5px; } .md-typeset .blogging-tag { color: var(--md-typeset-color); background-color: var(--md-typeset-code-color); } .md-typeset .blogging-tag code { border-radius: 5px; } Wikipedia. Anagram \u2013 wikipedia, the free encyclopedia. April 2020. URL: https://en.wikipedia.org/wiki/Anagram . \u21a9 Wikipedia. Green\u2013tao theorem \u2013 wikipedia, the free encyclopedia. April 2020. URL: https://en.wikipedia.org/wiki/Green%E2%80%93Tao_theorem . \u21a9 Wikipedia. Formula for primes \u2013 wikipedia, the free encyclopedia. April 2020. URL: https://en.wikipedia.org/wiki/Formula_for_primes . \u21a9 xanilax. Comment on 'clever algorithm to determine whether or not two words are anagrams'. June 2017. URL: shorturl.at/jqwI2 . \u21a9 \u21a9","title":"Conclus\u00e3o"},{"location":"blog/2022/capturar-atividades-do-strava-usando-python/","tags":["tutorial","python","API"],"text":"Atividades do Strava usando Python TLDR Um tutorial simples de como capturar atividades realizadas no Strava usando a biblioteca stravalib , do python. Esse ano eu resolvi tentar capturar todas as atividades que fa\u00e7o. Tudo isso, para que no fim do ano eu possa fazer an\u00e1lises mais acuradas sobre onde eu gastei meu tempo. Uma das coisas que eu fa\u00e7o com bastante frequ\u00eancia \u00e9 pedalar. Sempre que pedalo, uso o Strava pra guardar a minha atividade. Pesquisei e vi que o Strava tem uma API . O usu\u00e1rio do github hozn criou a stravalib , ent\u00e3o eu resolvi postar aqui um breve tutorial de como fazer isso. 1. Criar um app no Strava V\u00e1 em https://www.strava.com/settings/api e crie uma nova aplica\u00e7\u00e3o. Coloque localhost no campo Authorization Callback Domain . Ir\u00e1 aparecer o seu Client ID e o seu Client secret , copie para algum lugar, voc\u00ea ir\u00e1 precisar deles nos pr\u00f3ximos passos. 2. Instalar o pacote stravalib Abra o terminal e digite o comando: 1 pip3 install stravalib 3. Encontrar o seu access token e autorizar o app Com o terminal aberto, entre no python3 e digite o seguinte c\u00f3digo: 1 2 3 4 5 6 7 8 9 10 from stravalib.client import Client client = Client () print ( client . authorization_url ( client_id = CLIENT_ID , redirect_uri = 'http://localhost:8000/authorized' ) ) O CLIENT_ID \u00e9 o mesmo que voc\u00ea conseguiu no passo anterior. Copie a URL e cole no console. Voc\u00ea deve autorizar a aplica\u00e7\u00e3o. Depois disso, copie a vari\u00e1vel code da URL. 4. Capturar atividades Depois de autorizado, utilize o seguinte c\u00f3digo para capturar as atividades do dia atual: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from datetime import datetime from stravalib import Client client = Client () access_token = client . exchange_code_for_token ( client_id = CLIENT_ID , client_secret = CLIENT_SECRET , code = CODE ) activities = client . get_activities ( after = datetime ( 2019 , 1 , 29 ), limit = 5 ) for activity in activities : print ( activity . name , activity . moving_time , activity . distance ) E voil\u00e0 . #tutorial #python #API .md-typeset .blogging-tags-grid { display: flex; flex-direction: row; flex-wrap: wrap; gap: 8px; margin-top: 5px; } .md-typeset .blogging-tag { color: var(--md-typeset-color); background-color: var(--md-typeset-code-color); } .md-typeset .blogging-tag code { border-radius: 5px; }","title":"Atividades do Strava usando Python"},{"location":"blog/2022/capturar-atividades-do-strava-usando-python/#atividades-do-strava-usando-python","text":"TLDR Um tutorial simples de como capturar atividades realizadas no Strava usando a biblioteca stravalib , do python. Esse ano eu resolvi tentar capturar todas as atividades que fa\u00e7o. Tudo isso, para que no fim do ano eu possa fazer an\u00e1lises mais acuradas sobre onde eu gastei meu tempo. Uma das coisas que eu fa\u00e7o com bastante frequ\u00eancia \u00e9 pedalar. Sempre que pedalo, uso o Strava pra guardar a minha atividade. Pesquisei e vi que o Strava tem uma API . O usu\u00e1rio do github hozn criou a stravalib , ent\u00e3o eu resolvi postar aqui um breve tutorial de como fazer isso.","title":"Atividades do Strava usando Python"},{"location":"blog/2022/capturar-atividades-do-strava-usando-python/#1-criar-um-app-no-strava","text":"V\u00e1 em https://www.strava.com/settings/api e crie uma nova aplica\u00e7\u00e3o. Coloque localhost no campo Authorization Callback Domain . Ir\u00e1 aparecer o seu Client ID e o seu Client secret , copie para algum lugar, voc\u00ea ir\u00e1 precisar deles nos pr\u00f3ximos passos.","title":"1. Criar um app no Strava"},{"location":"blog/2022/capturar-atividades-do-strava-usando-python/#2-instalar-o-pacote-stravalib","text":"Abra o terminal e digite o comando: 1 pip3 install stravalib","title":"2. Instalar o pacote stravalib"},{"location":"blog/2022/capturar-atividades-do-strava-usando-python/#3-encontrar-o-seu-access-token-e-autorizar-o-app","text":"Com o terminal aberto, entre no python3 e digite o seguinte c\u00f3digo: 1 2 3 4 5 6 7 8 9 10 from stravalib.client import Client client = Client () print ( client . authorization_url ( client_id = CLIENT_ID , redirect_uri = 'http://localhost:8000/authorized' ) ) O CLIENT_ID \u00e9 o mesmo que voc\u00ea conseguiu no passo anterior. Copie a URL e cole no console. Voc\u00ea deve autorizar a aplica\u00e7\u00e3o. Depois disso, copie a vari\u00e1vel code da URL.","title":"3. Encontrar o seu access token e autorizar o app"},{"location":"blog/2022/capturar-atividades-do-strava-usando-python/#4-capturar-atividades","text":"Depois de autorizado, utilize o seguinte c\u00f3digo para capturar as atividades do dia atual: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from datetime import datetime from stravalib import Client client = Client () access_token = client . exchange_code_for_token ( client_id = CLIENT_ID , client_secret = CLIENT_SECRET , code = CODE ) activities = client . get_activities ( after = datetime ( 2019 , 1 , 29 ), limit = 5 ) for activity in activities : print ( activity . name , activity . moving_time , activity . distance ) E voil\u00e0 . #tutorial #python #API .md-typeset .blogging-tags-grid { display: flex; flex-direction: row; flex-wrap: wrap; gap: 8px; margin-top: 5px; } .md-typeset .blogging-tag { color: var(--md-typeset-color); background-color: var(--md-typeset-code-color); } .md-typeset .blogging-tag code { border-radius: 5px; }","title":"4. Capturar atividades"},{"location":"blog/2022/doshi2022/","tags":["reading notes","anomaly detection"],"text":"Reward Once, Penalize Once: Rectifying Time Series Anomaly Detection Neste artigo os autores prop\u00f5em uma m\u00e9trica que mede a pontualidade e precis\u00e3o para modelos de detec\u00e7\u00e3o de anomalias em sequ\u00eancias. Al\u00e9m disso tamb\u00e9m \u00e9 proposta uma abordagem eficiente para detec\u00e7\u00e3o de anomalias em s\u00e9ries temporais baseada em transformers, que foi avaliada extensivamente em v\u00e1rios benchmarks. Proposta Avalia\u00e7\u00e3o de desempenho Average detection delay Considere uma s\u00e9rie temporal \\{X_1, X_2, \\dots, X_t, \\dots\\} \\{X_1, X_2, \\dots, X_t, \\dots\\} que pode incluir sequ\u00eancias an\u00f4malas come\u00e7ando e terminando em tempos desconhecidos. Denote um tempo desconhecido da i i -\u00e9sima sequ\u00eancia an\u00f4mala como \\tau_i \\tau_i e T_i T_i como o tempo do alarme. A m\u00e9dia de atraso de detec\u00e7\u00e3o ( average detection delay , ADD) pode ser calculado como \\begin{equation} ADD = \\frac{1}{S} \\sum_{i=1}^S \\min \\left( T_i - \\tau_i, \\delta_\\max \\right), \\end{equation} em que S S denota o n\u00famero de eventos an\u00f4malos. Uma vez que a maioria das anomalias indica incidentes cr\u00edticos, pode ser essencial detectar um evento an\u00f4malo em um determinado per\u00edodo de tempo. Dito isto, se um alarme n\u00e3o \u00e9 ligado dentro de uma dura\u00e7\u00e3o [ \\tau_i, \\tau_i + \\delta_{\\max} ] [ \\tau_i, \\tau_i + \\delta_{\\max} ] depois que a atividade an\u00f4mala i i ocorrer, em que \\delta_{\\max} \\delta_{\\max} \u00e9 a m\u00e1xima toler\u00e2ncia m\u00e1xima de atraso. Precis\u00e3o do alarme de sequ\u00eancia N\u00famero de eventos an\u00f4malos detectados com respeito ao n\u00famero total de alarmes. Semelhante \u00e0 m\u00e9trica de precis\u00e3o. No entanto, em contraste com a m\u00e9trica de precis\u00e3o baseada em inst\u00e2ncia, a precis\u00e3o do alarme de sequ\u00eancia ( Sequence Alarm Precision , SAD) se concentra na detec\u00e7\u00e3o de sequ\u00eancias an\u00f4malas verdadeiras e, portanto, se concentra apenas na detec\u00e7\u00e3o precisa do in\u00edcio do evento an\u00f4malo. Se um alarme \u00e9 disparado antes mesmo de um evento come\u00e7ar, ou seja, T_j \\leq \\tau_i T_j \\leq \\tau_i , ent\u00e3o \u00e9 considerado um alarme falso. A precis\u00e3o do alarme de sequ\u00eancia pode ser calculado usando \\begin{equation} P = \\frac{1}{\\hat{S}} \\sum_{j=1}^\\hat{S} \\mathbf{1}_{\\{=\\}} T_j \\in \\bigcup_{i=1}^{S} [ \\tau_i, \\tau_i + \\delta_{\\max} ], \\end{equation} \\begin{equation} P = \\frac{1}{\\hat{S}} \\sum_{j=1}^\\hat{S} \\mathbf{1}_{\\{=\\}} T_j \\in \\bigcup_{i=1}^{S} [ \\tau_i, \\tau_i + \\delta_{\\max} ], \\end{equation} em que \\mathbf{1}_{\\{\\cdot\\}} \\mathbf{1}_{\\{\\cdot\\}} denota a fun\u00e7\u00e3o indicadora, \\hat{S} = |\\{T_j\\}| \\hat{S} = |\\{T_j\\}| \u00e9 a quantidade total de alarmes e |\\cdot| |\\cdot| \u00e9 a cardinalidade de um conjunto. Atraso de precis\u00e3o de sequ\u00eancia Atraso de precis\u00e3o de sequ\u00eancia ( Sequence Precision Delay , SPD) combina a m\u00e9dia de atraso de detec\u00e7\u00e3o com a precis\u00e3o do alarme de sequ\u00eancia. Nesse caso, ela utiliza o valor normalizado da ADD. Desse modo, matematicamente temos \\begin{equation} \\textrm{SPD} = \\int_{0}^{1} P(\\alpha) d\\alpha, \\end{equation} em que \\alpha \\alpha denota o valor normalizado da m\u00e9dia de atraso de detec\u00e7\u00e3o ( normalized average detection delay , NADD) #reading notes #anomaly detection .md-typeset .blogging-tags-grid { display: flex; flex-direction: row; flex-wrap: wrap; gap: 8px; margin-top: 5px; } .md-typeset .blogging-tag { color: var(--md-typeset-color); background-color: var(--md-typeset-code-color); } .md-typeset .blogging-tag code { border-radius: 5px; }","title":"Reward Once, Penalize Once: Rectifying Time Series Anomaly Detection"},{"location":"blog/2022/doshi2022/#reward-once-penalize-once-rectifying-time-series-anomaly-detection","text":"Neste artigo os autores prop\u00f5em uma m\u00e9trica que mede a pontualidade e precis\u00e3o para modelos de detec\u00e7\u00e3o de anomalias em sequ\u00eancias. Al\u00e9m disso tamb\u00e9m \u00e9 proposta uma abordagem eficiente para detec\u00e7\u00e3o de anomalias em s\u00e9ries temporais baseada em transformers, que foi avaliada extensivamente em v\u00e1rios benchmarks.","title":"Reward Once, Penalize Once: Rectifying Time Series Anomaly Detection"},{"location":"blog/2022/doshi2022/#proposta","text":"","title":" Proposta"},{"location":"blog/2022/doshi2022/#avaliacao-de-desempenho","text":"","title":"Avalia\u00e7\u00e3o de desempenho"},{"location":"blog/2022/doshi2022/#average-detection-delay","text":"Considere uma s\u00e9rie temporal \\{X_1, X_2, \\dots, X_t, \\dots\\} \\{X_1, X_2, \\dots, X_t, \\dots\\} que pode incluir sequ\u00eancias an\u00f4malas come\u00e7ando e terminando em tempos desconhecidos. Denote um tempo desconhecido da i i -\u00e9sima sequ\u00eancia an\u00f4mala como \\tau_i \\tau_i e T_i T_i como o tempo do alarme. A m\u00e9dia de atraso de detec\u00e7\u00e3o ( average detection delay , ADD) pode ser calculado como \\begin{equation} ADD = \\frac{1}{S} \\sum_{i=1}^S \\min \\left( T_i - \\tau_i, \\delta_\\max \\right), \\end{equation} em que S S denota o n\u00famero de eventos an\u00f4malos. Uma vez que a maioria das anomalias indica incidentes cr\u00edticos, pode ser essencial detectar um evento an\u00f4malo em um determinado per\u00edodo de tempo. Dito isto, se um alarme n\u00e3o \u00e9 ligado dentro de uma dura\u00e7\u00e3o [ \\tau_i, \\tau_i + \\delta_{\\max} ] [ \\tau_i, \\tau_i + \\delta_{\\max} ] depois que a atividade an\u00f4mala i i ocorrer, em que \\delta_{\\max} \\delta_{\\max} \u00e9 a m\u00e1xima toler\u00e2ncia m\u00e1xima de atraso.","title":"Average detection delay"},{"location":"blog/2022/doshi2022/#precisao-do-alarme-de-sequencia","text":"N\u00famero de eventos an\u00f4malos detectados com respeito ao n\u00famero total de alarmes. Semelhante \u00e0 m\u00e9trica de precis\u00e3o. No entanto, em contraste com a m\u00e9trica de precis\u00e3o baseada em inst\u00e2ncia, a precis\u00e3o do alarme de sequ\u00eancia ( Sequence Alarm Precision , SAD) se concentra na detec\u00e7\u00e3o de sequ\u00eancias an\u00f4malas verdadeiras e, portanto, se concentra apenas na detec\u00e7\u00e3o precisa do in\u00edcio do evento an\u00f4malo. Se um alarme \u00e9 disparado antes mesmo de um evento come\u00e7ar, ou seja, T_j \\leq \\tau_i T_j \\leq \\tau_i , ent\u00e3o \u00e9 considerado um alarme falso. A precis\u00e3o do alarme de sequ\u00eancia pode ser calculado usando \\begin{equation} P = \\frac{1}{\\hat{S}} \\sum_{j=1}^\\hat{S} \\mathbf{1}_{\\{=\\}} T_j \\in \\bigcup_{i=1}^{S} [ \\tau_i, \\tau_i + \\delta_{\\max} ], \\end{equation} \\begin{equation} P = \\frac{1}{\\hat{S}} \\sum_{j=1}^\\hat{S} \\mathbf{1}_{\\{=\\}} T_j \\in \\bigcup_{i=1}^{S} [ \\tau_i, \\tau_i + \\delta_{\\max} ], \\end{equation} em que \\mathbf{1}_{\\{\\cdot\\}} \\mathbf{1}_{\\{\\cdot\\}} denota a fun\u00e7\u00e3o indicadora, \\hat{S} = |\\{T_j\\}| \\hat{S} = |\\{T_j\\}| \u00e9 a quantidade total de alarmes e |\\cdot| |\\cdot| \u00e9 a cardinalidade de um conjunto.","title":"Precis\u00e3o do alarme de sequ\u00eancia"},{"location":"blog/2022/doshi2022/#atraso-de-precisao-de-sequencia","text":"Atraso de precis\u00e3o de sequ\u00eancia ( Sequence Precision Delay , SPD) combina a m\u00e9dia de atraso de detec\u00e7\u00e3o com a precis\u00e3o do alarme de sequ\u00eancia. Nesse caso, ela utiliza o valor normalizado da ADD. Desse modo, matematicamente temos \\begin{equation} \\textrm{SPD} = \\int_{0}^{1} P(\\alpha) d\\alpha, \\end{equation} em que \\alpha \\alpha denota o valor normalizado da m\u00e9dia de atraso de detec\u00e7\u00e3o ( normalized average detection delay , NADD) #reading notes #anomaly detection .md-typeset .blogging-tags-grid { display: flex; flex-direction: row; flex-wrap: wrap; gap: 8px; margin-top: 5px; } .md-typeset .blogging-tag { color: var(--md-typeset-color); background-color: var(--md-typeset-code-color); } .md-typeset .blogging-tag code { border-radius: 5px; }","title":"Atraso de precis\u00e3o de sequ\u00eancia"},{"location":"blog/2022/flowgmm/","tags":["reading notes"],"text":"Semi-Supervised Learning with Normalizing Flows Neste artigo, os autores desenvolveram o Flow Gaussian Mixture Model (FlowGMM), uma alternativa ponta-a-ponta para aprendizagem generativa semi-supervisionada atrav\u00e9s de normalizing flows, utilizando um modelo latente de mistura de gaussianas. Background Normalizing Flows Normalizing Flows (NF) s\u00e3o modelos n\u00e3o supervisionados para estimativa de densidade de probabilidade definidos atrav\u00e9s de um mapeamento invers\u00edvel f_{\\theta}:\\mathcal{X} \\to \\mathcal{Z} f_{\\theta}:\\mathcal{X} \\to \\mathcal{Z} do espa\u00e7o de dados \\mathcal{X} \\mathcal{X} para um espa\u00e7o latente \\mathcal{Z} \\mathcal{Z} . Deste modo, a distribui\u00e7\u00e3o dos dados pode ser modelada atrav\u00e9s da transforma\u00e7\u00e3o f^{-1}_{\\theta}:\\mathcal{Z} \\to \\mathcal{X} f^{-1}_{\\theta}:\\mathcal{Z} \\to \\mathcal{X} aplicada a uma vari\u00e1vel aleat\u00f3ria das distribui\u00e7\u00f5es latentes z \\sim p_{\\mathcal{Z}} z \\sim p_{\\mathcal{Z}} . Aplicando a regra da mudan\u00e7a de vari\u00e1veis, obtemos a distribui\u00e7\u00e3o de densidade da vari\u00e1vel aleat\u00f3ria observada, dada por \\begin{equation} p_{\\mathcal{X}}(x) = p_{\\mathcal{Z}}(z)\\left(f_{\\theta}(x)\\right) \\left| \\det \\left( \\frac{\\partial f}{\\partial x }\\right) \\right| \\label{eq:nf} \\end{equation} O mapeamento f_{\\theta} f_{\\theta} pode ser implementado atrav\u00e9s de uma cadeia de fun\u00e7\u00f5es invers\u00edveis, parametrizadas por uma arquitetura de redes neurais, constru\u00edda para garantir invertibilidade e efici\u00eancia no computo das log-determinantes. O modelo pode ser treinado a partir da maximiza\u00e7\u00e3o da verossimilhan\u00e7a da equa\u00e7\u00e3o (\\ref{eq:nf}) de dados de treinamento com respeito aos par\u00e2metros \\theta \\theta . Proposta Flow Gaussian Mixture Model (FlowGMM) Considere um conjunto de dados rotulados \\mathcal{D}_u = \\{\\boldsymbol{x}_n\\}_{n=1}^N \\mathcal{D}_u = \\{\\boldsymbol{x}_n\\}_{n=1}^N e um conjunto de dados n\u00e3o rotulados \\mathcal{D}_\\ell = \\{(\\boldsymbol{x}_m, y_m)\\}_{m=1}^M \\mathcal{D}_\\ell = \\{(\\boldsymbol{x}_m, y_m)\\}_{m=1}^M , tal que y_m \\in \\mathcal{C} y_m \\in \\mathcal{C} . O FlowGMM, utiliza a seguinte distribui\u00e7\u00e3o para o espa\u00e7o latente de \\mathcal{D}_\\ell \\mathcal{D}_\\ell \\begin{equation} p_{\\mathcal{Z}}(z|y=k) = \\mathcal{N}(z|\\mu_k, \\Sigma_k). \\label{eq:conditional-probability} \\end{equation} em que \\mu_k \\mu_k e \\Sigma_k \\Sigma_k s\u00e3o, respectivamente, a m\u00e9dia e a matriz de covari\u00e2ncia da classe k k . A distribui\u00e7\u00e3o marginal de z z \u00e9 ent\u00e3o uma mistura de gaussianas. Com classes balanceadas, esta distribui\u00e7\u00e3o \u00e9 \\begin{equation} p_{\\mathcal{Z}}(z) = \\frac{1}{C} \\sum_{k=1}^{C} \\mathcal{N}\\left(z|\\mu_k, \\Sigma_k\\right). \\end{equation} em que C C \u00e9 o n\u00famero de classes. Combinando as equa\u00e7\u00f5es (\\ref{eq:conditional-probability}) e (\\ref{eq:nf}), a verossimilhan\u00e7a do conjunto de dados \\mathcal{D}_\\ell \\mathcal{D}_\\ell \u00e9 \\begin{equation} p_{\\mathcal{X}}(x|y=k) = \\mathcal{N}\\left(f_\\theta(x)|\\mu_k, \\Sigma_k\\right) \\left| \\det \\left( \\frac{\\partial f}{\\partial x }\\right) \\right|, \\end{equation} e a verossimilhan\u00e7a dos dados n\u00e3o rotulados \u00e9 p_{\\mathcal{X}}(x) = \\sum_k p_{\\mathcal{X}}(x|y=k)p(y=k) p_{\\mathcal{X}}(x) = \\sum_k p_{\\mathcal{X}}(x|y=k)p(y=k) . O modelo pode ser treinado de uma maneira semi supervisionada afim de maximizar a verossimilhan\u00e7a conjunta dos dados rotulados e n\u00e3o rotulados \\begin{equation} p_{\\mathcal{X}}(\\mathcal{D}_u, \\mathcal{D}_\\ell |\\theta) = \\prod_{x_n \\in \\mathcal{D}_u} p_{\\mathcal{X}}(x_n) \\prod_{(x_m, y_m) \\in \\mathcal{D}_\\ell} p_{\\mathcal{X}}(x_m, y_m),\\label{eq:log-verossimilhanca} \\end{equation} \\begin{equation} p_{\\mathcal{X}}(\\mathcal{D}_u, \\mathcal{D}_\\ell |\\theta) = \\prod_{x_n \\in \\mathcal{D}_u} p_{\\mathcal{X}}(x_n) \\prod_{(x_m, y_m) \\in \\mathcal{D}_\\ell} p_{\\mathcal{X}}(x_m, y_m),\\label{eq:log-verossimilhanca} \\end{equation} sobre os par\u00e2metros \\theta \\theta da fun\u00e7\u00e3o bijetiva f_\\theta f_\\theta . Em particular, dado um ponto de teste x x , uma predi\u00e7\u00e3o \\hat{y} \\hat{y} da classe relacionada pode ser realizada utilizando a m\u00e1xima verossimilhan\u00e7a da densidade condicional em rela\u00e7\u00e3o as classes, ou seja, \\hat{y} = \\arg \\max_{k \\in \\{ 1, \\dots, C \\} } p_{\\mathcal{X}}(y |x ) \\hat{y} = \\arg \\max_{k \\in \\{ 1, \\dots, C \\} } p_{\\mathcal{X}}(y |x ) , em que \\begin{equation} p_{\\mathcal{X}}(y |x ) = \\frac{\\mathcal{N}\\left(f_\\theta(x)|\\mu_k, \\Sigma_k\\right)}{ \\sum_{k=1}^C \\mathcal{N}\\left(f_\\theta(x)|\\mu_k, \\Sigma_k\\right)}. \\end{equation} Regulariza\u00e7\u00e3o de consist\u00eancia A regulariza\u00e7\u00e3o de consist\u00eancia penaliza mudan\u00e7as nas predi\u00e7\u00f5es da rede com respeito a perturba\u00e7\u00f5es na entrada, tal como transla\u00e7\u00e3o e rota\u00e7\u00e3o, com uma perda adicional que pode ser computada para dados n\u00e3o rotulados \\begin{equation} \\ell_{\\text{cons}}(x) = \\left| g\\left(x^{(a)}\\right) - g\\left(x^{(b)}\\right) \\right| \\end{equation} em que x^{(a)} x^{(a)} e x^{(b)} x^{(b)} s\u00e3o perturba\u00e7\u00f5es aleat\u00f3rias de x x e g g \u00e9 o vetor de probabilidades de cada uma das classes. Motivado por tais m\u00e9todos o FlowGMM introduz uma regulariza\u00e7\u00e3o de consist\u00eancia para uma dada imagem x x , baseada na seguinte equa\u00e7\u00e3o \\begin{align} \\ell_\\text{cons}(x) &= - \\log (x^{(a)}|y^{(b)}) \\nonumber \\\\ &= - \\log \\mathcal{N}\\left(f_\\theta\\left(x^{(a)}\\right)|\\mu_{y^{(b)}}, \\Sigma_{y^{(b)}}\\right) - \\log \\left| \\det \\left(\\frac{\\partial f}{\\partial x^{(a)}} \\right) \\right|. \\label{eq:flow-cons} \\end{align} \\begin{align} \\ell_\\text{cons}(x) &= - \\log (x^{(a)}|y^{(b)}) \\nonumber \\\\ &= - \\log \\mathcal{N}\\left(f_\\theta\\left(x^{(a)}\\right)|\\mu_{y^{(b)}}, \\Sigma_{y^{(b)}}\\right) - \\log \\left| \\det \\left(\\frac{\\partial f}{\\partial x^{(a)}} \\right) \\right|. \\label{eq:flow-cons} \\end{align} Este termo de perda encoraja o modelo a mapear pequenas perturba\u00e7\u00f5es das mesmas entradas n\u00e3o rotuladas para os mesmos componentes da distribui\u00e7\u00e3o da mistura de gaussianas no espa\u00e7o latente. A perda final para FlowGMM-cons \u00e9 ent\u00e3o a soma ponderada da perda de consist\u00eancia (\\ref{eq:flow-cons}) e o negativo da log-verossimilhan\u00e7a dos dados rotulados e n\u00e3o rotulados (\\ref{eq:log-verossimilhanca}). #reading notes .md-typeset .blogging-tags-grid { display: flex; flex-direction: row; flex-wrap: wrap; gap: 8px; margin-top: 5px; } .md-typeset .blogging-tag { color: var(--md-typeset-color); background-color: var(--md-typeset-code-color); } .md-typeset .blogging-tag code { border-radius: 5px; }","title":"Semi-Supervised Learning with Normalizing Flows"},{"location":"blog/2022/flowgmm/#semi-supervised-learning-with-normalizing-flows","text":"Neste artigo, os autores desenvolveram o Flow Gaussian Mixture Model (FlowGMM), uma alternativa ponta-a-ponta para aprendizagem generativa semi-supervisionada atrav\u00e9s de normalizing flows, utilizando um modelo latente de mistura de gaussianas.","title":"Semi-Supervised Learning with Normalizing Flows"},{"location":"blog/2022/flowgmm/#background","text":"","title":" Background"},{"location":"blog/2022/flowgmm/#normalizing-flows","text":"Normalizing Flows (NF) s\u00e3o modelos n\u00e3o supervisionados para estimativa de densidade de probabilidade definidos atrav\u00e9s de um mapeamento invers\u00edvel f_{\\theta}:\\mathcal{X} \\to \\mathcal{Z} f_{\\theta}:\\mathcal{X} \\to \\mathcal{Z} do espa\u00e7o de dados \\mathcal{X} \\mathcal{X} para um espa\u00e7o latente \\mathcal{Z} \\mathcal{Z} . Deste modo, a distribui\u00e7\u00e3o dos dados pode ser modelada atrav\u00e9s da transforma\u00e7\u00e3o f^{-1}_{\\theta}:\\mathcal{Z} \\to \\mathcal{X} f^{-1}_{\\theta}:\\mathcal{Z} \\to \\mathcal{X} aplicada a uma vari\u00e1vel aleat\u00f3ria das distribui\u00e7\u00f5es latentes z \\sim p_{\\mathcal{Z}} z \\sim p_{\\mathcal{Z}} . Aplicando a regra da mudan\u00e7a de vari\u00e1veis, obtemos a distribui\u00e7\u00e3o de densidade da vari\u00e1vel aleat\u00f3ria observada, dada por \\begin{equation} p_{\\mathcal{X}}(x) = p_{\\mathcal{Z}}(z)\\left(f_{\\theta}(x)\\right) \\left| \\det \\left( \\frac{\\partial f}{\\partial x }\\right) \\right| \\label{eq:nf} \\end{equation} O mapeamento f_{\\theta} f_{\\theta} pode ser implementado atrav\u00e9s de uma cadeia de fun\u00e7\u00f5es invers\u00edveis, parametrizadas por uma arquitetura de redes neurais, constru\u00edda para garantir invertibilidade e efici\u00eancia no computo das log-determinantes. O modelo pode ser treinado a partir da maximiza\u00e7\u00e3o da verossimilhan\u00e7a da equa\u00e7\u00e3o (\\ref{eq:nf}) de dados de treinamento com respeito aos par\u00e2metros \\theta \\theta .","title":"Normalizing Flows"},{"location":"blog/2022/flowgmm/#proposta","text":"","title":" Proposta"},{"location":"blog/2022/flowgmm/#flow-gaussian-mixture-model-flowgmm","text":"Considere um conjunto de dados rotulados \\mathcal{D}_u = \\{\\boldsymbol{x}_n\\}_{n=1}^N \\mathcal{D}_u = \\{\\boldsymbol{x}_n\\}_{n=1}^N e um conjunto de dados n\u00e3o rotulados \\mathcal{D}_\\ell = \\{(\\boldsymbol{x}_m, y_m)\\}_{m=1}^M \\mathcal{D}_\\ell = \\{(\\boldsymbol{x}_m, y_m)\\}_{m=1}^M , tal que y_m \\in \\mathcal{C} y_m \\in \\mathcal{C} . O FlowGMM, utiliza a seguinte distribui\u00e7\u00e3o para o espa\u00e7o latente de \\mathcal{D}_\\ell \\mathcal{D}_\\ell \\begin{equation} p_{\\mathcal{Z}}(z|y=k) = \\mathcal{N}(z|\\mu_k, \\Sigma_k). \\label{eq:conditional-probability} \\end{equation} em que \\mu_k \\mu_k e \\Sigma_k \\Sigma_k s\u00e3o, respectivamente, a m\u00e9dia e a matriz de covari\u00e2ncia da classe k k . A distribui\u00e7\u00e3o marginal de z z \u00e9 ent\u00e3o uma mistura de gaussianas. Com classes balanceadas, esta distribui\u00e7\u00e3o \u00e9 \\begin{equation} p_{\\mathcal{Z}}(z) = \\frac{1}{C} \\sum_{k=1}^{C} \\mathcal{N}\\left(z|\\mu_k, \\Sigma_k\\right). \\end{equation} em que C C \u00e9 o n\u00famero de classes. Combinando as equa\u00e7\u00f5es (\\ref{eq:conditional-probability}) e (\\ref{eq:nf}), a verossimilhan\u00e7a do conjunto de dados \\mathcal{D}_\\ell \\mathcal{D}_\\ell \u00e9 \\begin{equation} p_{\\mathcal{X}}(x|y=k) = \\mathcal{N}\\left(f_\\theta(x)|\\mu_k, \\Sigma_k\\right) \\left| \\det \\left( \\frac{\\partial f}{\\partial x }\\right) \\right|, \\end{equation} e a verossimilhan\u00e7a dos dados n\u00e3o rotulados \u00e9 p_{\\mathcal{X}}(x) = \\sum_k p_{\\mathcal{X}}(x|y=k)p(y=k) p_{\\mathcal{X}}(x) = \\sum_k p_{\\mathcal{X}}(x|y=k)p(y=k) . O modelo pode ser treinado de uma maneira semi supervisionada afim de maximizar a verossimilhan\u00e7a conjunta dos dados rotulados e n\u00e3o rotulados \\begin{equation} p_{\\mathcal{X}}(\\mathcal{D}_u, \\mathcal{D}_\\ell |\\theta) = \\prod_{x_n \\in \\mathcal{D}_u} p_{\\mathcal{X}}(x_n) \\prod_{(x_m, y_m) \\in \\mathcal{D}_\\ell} p_{\\mathcal{X}}(x_m, y_m),\\label{eq:log-verossimilhanca} \\end{equation} \\begin{equation} p_{\\mathcal{X}}(\\mathcal{D}_u, \\mathcal{D}_\\ell |\\theta) = \\prod_{x_n \\in \\mathcal{D}_u} p_{\\mathcal{X}}(x_n) \\prod_{(x_m, y_m) \\in \\mathcal{D}_\\ell} p_{\\mathcal{X}}(x_m, y_m),\\label{eq:log-verossimilhanca} \\end{equation} sobre os par\u00e2metros \\theta \\theta da fun\u00e7\u00e3o bijetiva f_\\theta f_\\theta . Em particular, dado um ponto de teste x x , uma predi\u00e7\u00e3o \\hat{y} \\hat{y} da classe relacionada pode ser realizada utilizando a m\u00e1xima verossimilhan\u00e7a da densidade condicional em rela\u00e7\u00e3o as classes, ou seja, \\hat{y} = \\arg \\max_{k \\in \\{ 1, \\dots, C \\} } p_{\\mathcal{X}}(y |x ) \\hat{y} = \\arg \\max_{k \\in \\{ 1, \\dots, C \\} } p_{\\mathcal{X}}(y |x ) , em que \\begin{equation} p_{\\mathcal{X}}(y |x ) = \\frac{\\mathcal{N}\\left(f_\\theta(x)|\\mu_k, \\Sigma_k\\right)}{ \\sum_{k=1}^C \\mathcal{N}\\left(f_\\theta(x)|\\mu_k, \\Sigma_k\\right)}. \\end{equation}","title":"Flow Gaussian Mixture Model (FlowGMM)"},{"location":"blog/2022/flowgmm/#regularizacao-de-consistencia","text":"A regulariza\u00e7\u00e3o de consist\u00eancia penaliza mudan\u00e7as nas predi\u00e7\u00f5es da rede com respeito a perturba\u00e7\u00f5es na entrada, tal como transla\u00e7\u00e3o e rota\u00e7\u00e3o, com uma perda adicional que pode ser computada para dados n\u00e3o rotulados \\begin{equation} \\ell_{\\text{cons}}(x) = \\left| g\\left(x^{(a)}\\right) - g\\left(x^{(b)}\\right) \\right| \\end{equation} em que x^{(a)} x^{(a)} e x^{(b)} x^{(b)} s\u00e3o perturba\u00e7\u00f5es aleat\u00f3rias de x x e g g \u00e9 o vetor de probabilidades de cada uma das classes. Motivado por tais m\u00e9todos o FlowGMM introduz uma regulariza\u00e7\u00e3o de consist\u00eancia para uma dada imagem x x , baseada na seguinte equa\u00e7\u00e3o \\begin{align} \\ell_\\text{cons}(x) &= - \\log (x^{(a)}|y^{(b)}) \\nonumber \\\\ &= - \\log \\mathcal{N}\\left(f_\\theta\\left(x^{(a)}\\right)|\\mu_{y^{(b)}}, \\Sigma_{y^{(b)}}\\right) - \\log \\left| \\det \\left(\\frac{\\partial f}{\\partial x^{(a)}} \\right) \\right|. \\label{eq:flow-cons} \\end{align} \\begin{align} \\ell_\\text{cons}(x) &= - \\log (x^{(a)}|y^{(b)}) \\nonumber \\\\ &= - \\log \\mathcal{N}\\left(f_\\theta\\left(x^{(a)}\\right)|\\mu_{y^{(b)}}, \\Sigma_{y^{(b)}}\\right) - \\log \\left| \\det \\left(\\frac{\\partial f}{\\partial x^{(a)}} \\right) \\right|. \\label{eq:flow-cons} \\end{align} Este termo de perda encoraja o modelo a mapear pequenas perturba\u00e7\u00f5es das mesmas entradas n\u00e3o rotuladas para os mesmos componentes da distribui\u00e7\u00e3o da mistura de gaussianas no espa\u00e7o latente. A perda final para FlowGMM-cons \u00e9 ent\u00e3o a soma ponderada da perda de consist\u00eancia (\\ref{eq:flow-cons}) e o negativo da log-verossimilhan\u00e7a dos dados rotulados e n\u00e3o rotulados (\\ref{eq:log-verossimilhanca}). #reading notes .md-typeset .blogging-tags-grid { display: flex; flex-direction: row; flex-wrap: wrap; gap: 8px; margin-top: 5px; } .md-typeset .blogging-tag { color: var(--md-typeset-color); background-color: var(--md-typeset-code-color); } .md-typeset .blogging-tag code { border-radius: 5px; }","title":"Regulariza\u00e7\u00e3o de consist\u00eancia"},{"location":"blog/2022/managing-messes-in-computational-notebooks/","tags":["reading notes"],"text":"Managing Messes in Computational Notebooks Abstract Os cientistas de dados utilizam \"programa\u00e7\u00e3o explorat\u00f3ria\" atrav\u00e9s de notebooks para escrever c\u00f3digo, analizar, visualizar dados, testar hip\u00f3teses e criar modelos 1 . No entanto, a medida que a an\u00e1lise avan\u00e7a, os notebooks tendem a se tornar desordenados, inconsistentes e a acomular \"bagun\u00e7as\" 2 3 . Em geral, existem tr\u00eas tipos de bagun\u00e7as comuns aos notebooks: desordem, em que o int\u00e9rprete executa o c\u00f3digo em uma ordem diferente da apresentada nas c\u00e9lulas; exclus\u00e3o, onde o usu\u00e1rio exclui ou substitui o conte\u00fado de uma c\u00e9lula, mas o int\u00e9rprete ret\u00e9m o efeito do c\u00f3digo da c\u00e9lula; e dispers\u00e3o, onde o c\u00f3digo que gera um resultado est\u00e1 espalhado por muitas c\u00e9lulas distantes. O artigo apresenta um conjunto de ferramentas de coleta de c\u00f3digo que ajudam na limpeza, recupera\u00e7\u00e3o e compara\u00e7\u00e3o de c\u00f3digo anteriores. Al\u00e9m disso, foi realizado um estudo qualitativo de usabilidade, que fornece informa\u00e7\u00f5es sobre o uso e usabilidade das ferramentas desenvolvidas. M\u00e9todos Foram realizadas entrevistas formativas com 8 cientistas de dados. Foram propostas diversas extens\u00f5es ao modelo de intera\u00e7\u00e3o com os notebooks. Foi apresentado maior entusiasmo por ferramentas para ajudar na limpeza de resultados e explora\u00e7\u00e3o de variantes passadas de c\u00f3digo. As entrevistas e a revis\u00e3o de literatura produziram ideias chave que orientaram no design da ferramente: Gerenciamento post-hoc de bagun\u00e7as : os analistas tem diversas prefer\u00eancias quanto a organiza\u00e7\u00e3o e gerenciamento de vers\u00f5es de c\u00f3digo. A solu\u00e7\u00e3o proposta foi a cria\u00e7\u00e3o de ferramentas que coletam silenciosamente o hist\u00f3rico e fornecem acesso ao c\u00f3digo que produziu qualquer resultado (vari\u00e1vel, gr\u00e1fico, etc). Portabilidade de c\u00f3digo coletado : os cientistas utilizam c\u00f3digo no mesmo notebook, em notebooks diferentes ou mesmo em scripts separados. As ferramentas projetadas tamb\u00e9m facilitam a coleta de c\u00f3digo para novos notebooks, c\u00e9lulas ou clipboard. C\u00f3digo de consulta atrav\u00e9s da sele\u00e7\u00e3o direta de resultados : trabalhos anteriores mostraram que os cientistas frequentemente procuram a saida do programa ao procurar c\u00f3digo para reutilizar. Dessa maneira, o mais recomendado \u00e9 que as sele\u00e7\u00f5es de resultados forneceriam o m\u00e9todo mais direto para acessar o hist\u00f3rico relevante. Implementa\u00e7\u00e3o Utilizando as ideias-chave comentadas anteriormente, foi desenvolvida uma ferramenta chamada gather, que consiste em um plugin para jupyter notebooks. Tal implementa\u00e7\u00e3o suporta somente notebooks escritos em Python 3, mas os autores relatam que as especifica\u00e7\u00f5es apresentadas no artigo ajudariam na constru\u00e7\u00e3o de ferramentas semelhantes para notebooks com linguagens parecidas com python (Julia e R). Back-end Front-end Quando um analista deseja utilizar o gather para coletar o c\u00f3digo que produziu algum resultado, o back-end (1) divide o log de c\u00e9lulas executadas at\u00e9 a c\u00e9lula em que o analista clicou em um resultado e descarta as outras c\u00e9lulas. Depois disso ele (2) concatena o texto das c\u00e9lulas restantes em um \u00fanico programa; (3) divide o programa usando as sele\u00e7\u00f5es do analista como crit\u00e9rio de fatia; (4) combina as c\u00e9lulas fatiadas com os resultados selecionados se forem sa\u00eddas de c\u00f3digo e (5) exibe essas c\u00e9lulas em um notebook ou navegador de vers\u00e3o. A figura a seguir exemplifica o que foi dito: Ao longo de uma longa an\u00e1lise, um (1) notebook ficar\u00e1 confuso e inconsistente. Com o gather, um analista pode (2) selecionar resultados (por exemplo, gr\u00e1ficos, tabelas, defini\u00e7\u00f5es de vari\u00e1veis e qualquer outra sa\u00edda de c\u00f3digo) e clicar em (3) gather to \"notebook\" (ou clipboard, revisions) para obter uma fatia m\u00ednima, completa e ordenada que replica os resultados selecionados. Estudo de usabilidade ( in-lab ) 200 participantes foram selecionados aleatoriamente, mas apenas 12 estavam aptos e/ou responderam ao convite de participa\u00e7\u00e3o do experimento, que consistia em uma sess\u00e3o de duas horas em laborat\u00f3rio para execu\u00e7\u00e3o de duas tarefas, uma delas de limpeza de notebook e outra de an\u00e1lise explorat\u00f3ria. Os participantes foram observados e, ao final da sess\u00e3o, responderam question\u00e1rios ao final de cada tarefa. Resultados Os analistas consideraram o gather mais util em coletar c\u00f3digo para novos notebooks, quando executavam a tarefa de limpeza e quando executavam an\u00e1lises explorat\u00f3rias. Al\u00e9m disso, os analistas tamb\u00e9m apreciaram os destaques da depend\u00eancia, especialmente quando estavam limpando o c\u00f3digo. Me and Fisher, my cat. Limita\u00e7\u00f5es Duas limita\u00e7\u00f5es ficaram claras: (1) os participantes n\u00e3o fizeram seu pr\u00f3prio trabalho, com seus pr\u00f3prios dados; (2) curta dura\u00e7\u00e3o do estudo, que acreditasse ser respons\u00e1vel pelo baixo uso do recurso de navegador de vers\u00e3o. Conclus\u00f5es Os participantes responderam positivamente as ferramentas do gather, principalmente a que produz automaticamente o c\u00f3digo m\u00ednimo necess\u00e1rio para replicar um conjunto escolhido de resultados de an\u00e1lise. Al\u00e9m disso, os analistas usaram principalmente o gather como um \"movimento final\" para compartilhar o trabalho. Por fim, os analistas tamb\u00e9m encontraram usos imprevistos, como gerar material de refer\u00eancia, criar ramifica\u00e7\u00f5es leves em seu c\u00f3digo e criar resumos para v\u00e1rios p\u00fablicos. #reading notes .md-typeset .blogging-tags-grid { display: flex; flex-direction: row; flex-wrap: wrap; gap: 8px; margin-top: 5px; } .md-typeset .blogging-tag { color: var(--md-typeset-color); background-color: var(--md-typeset-code-color); } .md-typeset .blogging-tag code { border-radius: 5px; } Mary Beth Kery and Brad A Myers. Exploring exploratory programming. In 2017 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC) , 25\u201329. IEEE, 2017. \u21a9 Mary Beth Kery, Marissa Radensky, Mahima Arya, Bonnie E John, and Brad A Myers. The story in the notebook: exploratory data science using a literate programming tool. In Proceedings of the 2018 CHI Conference on Human Factors in Computing Systems , 1\u201311. 2018. \u21a9 Adam Rule, Ian Drosos, Aur\u00e9lien Tabard, and James D Hollan. Aiding collaborative reuse of computational notebooks with annotated cell folding. Proceedings of the ACM on Human-Computer Interaction , 2(CSCW):1\u201312, 2018. \u21a9","title":"Managing Messes in Computational Notebooks"},{"location":"blog/2022/managing-messes-in-computational-notebooks/#managing-messes-in-computational-notebooks","text":"Abstract Os cientistas de dados utilizam \"programa\u00e7\u00e3o explorat\u00f3ria\" atrav\u00e9s de notebooks para escrever c\u00f3digo, analizar, visualizar dados, testar hip\u00f3teses e criar modelos 1 . No entanto, a medida que a an\u00e1lise avan\u00e7a, os notebooks tendem a se tornar desordenados, inconsistentes e a acomular \"bagun\u00e7as\" 2 3 . Em geral, existem tr\u00eas tipos de bagun\u00e7as comuns aos notebooks: desordem, em que o int\u00e9rprete executa o c\u00f3digo em uma ordem diferente da apresentada nas c\u00e9lulas; exclus\u00e3o, onde o usu\u00e1rio exclui ou substitui o conte\u00fado de uma c\u00e9lula, mas o int\u00e9rprete ret\u00e9m o efeito do c\u00f3digo da c\u00e9lula; e dispers\u00e3o, onde o c\u00f3digo que gera um resultado est\u00e1 espalhado por muitas c\u00e9lulas distantes. O artigo apresenta um conjunto de ferramentas de coleta de c\u00f3digo que ajudam na limpeza, recupera\u00e7\u00e3o e compara\u00e7\u00e3o de c\u00f3digo anteriores. Al\u00e9m disso, foi realizado um estudo qualitativo de usabilidade, que fornece informa\u00e7\u00f5es sobre o uso e usabilidade das ferramentas desenvolvidas.","title":"Managing Messes in Computational Notebooks"},{"location":"blog/2022/managing-messes-in-computational-notebooks/#metodos","text":"Foram realizadas entrevistas formativas com 8 cientistas de dados. Foram propostas diversas extens\u00f5es ao modelo de intera\u00e7\u00e3o com os notebooks. Foi apresentado maior entusiasmo por ferramentas para ajudar na limpeza de resultados e explora\u00e7\u00e3o de variantes passadas de c\u00f3digo. As entrevistas e a revis\u00e3o de literatura produziram ideias chave que orientaram no design da ferramente: Gerenciamento post-hoc de bagun\u00e7as : os analistas tem diversas prefer\u00eancias quanto a organiza\u00e7\u00e3o e gerenciamento de vers\u00f5es de c\u00f3digo. A solu\u00e7\u00e3o proposta foi a cria\u00e7\u00e3o de ferramentas que coletam silenciosamente o hist\u00f3rico e fornecem acesso ao c\u00f3digo que produziu qualquer resultado (vari\u00e1vel, gr\u00e1fico, etc). Portabilidade de c\u00f3digo coletado : os cientistas utilizam c\u00f3digo no mesmo notebook, em notebooks diferentes ou mesmo em scripts separados. As ferramentas projetadas tamb\u00e9m facilitam a coleta de c\u00f3digo para novos notebooks, c\u00e9lulas ou clipboard. C\u00f3digo de consulta atrav\u00e9s da sele\u00e7\u00e3o direta de resultados : trabalhos anteriores mostraram que os cientistas frequentemente procuram a saida do programa ao procurar c\u00f3digo para reutilizar. Dessa maneira, o mais recomendado \u00e9 que as sele\u00e7\u00f5es de resultados forneceriam o m\u00e9todo mais direto para acessar o hist\u00f3rico relevante.","title":"M\u00e9todos"},{"location":"blog/2022/managing-messes-in-computational-notebooks/#implementacao","text":"Utilizando as ideias-chave comentadas anteriormente, foi desenvolvida uma ferramenta chamada gather, que consiste em um plugin para jupyter notebooks. Tal implementa\u00e7\u00e3o suporta somente notebooks escritos em Python 3, mas os autores relatam que as especifica\u00e7\u00f5es apresentadas no artigo ajudariam na constru\u00e7\u00e3o de ferramentas semelhantes para notebooks com linguagens parecidas com python (Julia e R). Back-end Front-end Quando um analista deseja utilizar o gather para coletar o c\u00f3digo que produziu algum resultado, o back-end (1) divide o log de c\u00e9lulas executadas at\u00e9 a c\u00e9lula em que o analista clicou em um resultado e descarta as outras c\u00e9lulas. Depois disso ele (2) concatena o texto das c\u00e9lulas restantes em um \u00fanico programa; (3) divide o programa usando as sele\u00e7\u00f5es do analista como crit\u00e9rio de fatia; (4) combina as c\u00e9lulas fatiadas com os resultados selecionados se forem sa\u00eddas de c\u00f3digo e (5) exibe essas c\u00e9lulas em um notebook ou navegador de vers\u00e3o. A figura a seguir exemplifica o que foi dito: Ao longo de uma longa an\u00e1lise, um (1) notebook ficar\u00e1 confuso e inconsistente. Com o gather, um analista pode (2) selecionar resultados (por exemplo, gr\u00e1ficos, tabelas, defini\u00e7\u00f5es de vari\u00e1veis e qualquer outra sa\u00edda de c\u00f3digo) e clicar em (3) gather to \"notebook\" (ou clipboard, revisions) para obter uma fatia m\u00ednima, completa e ordenada que replica os resultados selecionados.","title":"Implementa\u00e7\u00e3o"},{"location":"blog/2022/managing-messes-in-computational-notebooks/#estudo-de-usabilidade-in-lab","text":"200 participantes foram selecionados aleatoriamente, mas apenas 12 estavam aptos e/ou responderam ao convite de participa\u00e7\u00e3o do experimento, que consistia em uma sess\u00e3o de duas horas em laborat\u00f3rio para execu\u00e7\u00e3o de duas tarefas, uma delas de limpeza de notebook e outra de an\u00e1lise explorat\u00f3ria. Os participantes foram observados e, ao final da sess\u00e3o, responderam question\u00e1rios ao final de cada tarefa.","title":"Estudo de usabilidade (in-lab)"},{"location":"blog/2022/managing-messes-in-computational-notebooks/#resultados","text":"Os analistas consideraram o gather mais util em coletar c\u00f3digo para novos notebooks, quando executavam a tarefa de limpeza e quando executavam an\u00e1lises explorat\u00f3rias. Al\u00e9m disso, os analistas tamb\u00e9m apreciaram os destaques da depend\u00eancia, especialmente quando estavam limpando o c\u00f3digo. Me and Fisher, my cat.","title":"Resultados"},{"location":"blog/2022/managing-messes-in-computational-notebooks/#limitacoes","text":"Duas limita\u00e7\u00f5es ficaram claras: (1) os participantes n\u00e3o fizeram seu pr\u00f3prio trabalho, com seus pr\u00f3prios dados; (2) curta dura\u00e7\u00e3o do estudo, que acreditasse ser respons\u00e1vel pelo baixo uso do recurso de navegador de vers\u00e3o.","title":"Limita\u00e7\u00f5es"},{"location":"blog/2022/managing-messes-in-computational-notebooks/#conclusoes","text":"Os participantes responderam positivamente as ferramentas do gather, principalmente a que produz automaticamente o c\u00f3digo m\u00ednimo necess\u00e1rio para replicar um conjunto escolhido de resultados de an\u00e1lise. Al\u00e9m disso, os analistas usaram principalmente o gather como um \"movimento final\" para compartilhar o trabalho. Por fim, os analistas tamb\u00e9m encontraram usos imprevistos, como gerar material de refer\u00eancia, criar ramifica\u00e7\u00f5es leves em seu c\u00f3digo e criar resumos para v\u00e1rios p\u00fablicos. #reading notes .md-typeset .blogging-tags-grid { display: flex; flex-direction: row; flex-wrap: wrap; gap: 8px; margin-top: 5px; } .md-typeset .blogging-tag { color: var(--md-typeset-color); background-color: var(--md-typeset-code-color); } .md-typeset .blogging-tag code { border-radius: 5px; } Mary Beth Kery and Brad A Myers. Exploring exploratory programming. In 2017 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC) , 25\u201329. IEEE, 2017. \u21a9 Mary Beth Kery, Marissa Radensky, Mahima Arya, Bonnie E John, and Brad A Myers. The story in the notebook: exploratory data science using a literate programming tool. In Proceedings of the 2018 CHI Conference on Human Factors in Computing Systems , 1\u201311. 2018. \u21a9 Adam Rule, Ian Drosos, Aur\u00e9lien Tabard, and James D Hollan. Aiding collaborative reuse of computational notebooks with annotated cell folding. Proceedings of the ACM on Human-Computer Interaction , 2(CSCW):1\u201312, 2018. \u21a9","title":"Conclus\u00f5es"},{"location":"blog/2022/software-development-workflow/","tags":["dicas","desenvolvimento de software"],"text":"Ciclo de desenvolvimento de software Independente do tipo, para iniciar um projeto que envolve desenvolvimento de software com qualidade \u00e9 necess\u00e1rio que alguns protocolos sejam seguidos. Nesse artigo eu tento citar o fluxo de trabalho que utilizo no desenvolvimento dos meus projetos pessoais de software. Al\u00e9m disso, apresento as ferramentas que utilizo em cada uma das etapas. Notas Artigo destinado a pessoas com o conhecimento m\u00ednimo em ferramentas de controle de vers\u00e3o. Alguns termos s\u00e3o apresentados em ingl\u00eas quando n\u00e3o encontradas palavras adequadas para tradu\u00e7\u00e3o. Como trata-se do desenvolvimento de software, a cria\u00e7\u00e3o do reposit\u00f3rio de c\u00f3digo n\u00e3o ser\u00e1 mencionada, sendo o passo 0 do ciclo apresentado. Na Figura 1 \u00e9 apresentada uma vis\u00e3o geral do fluxo que uso no desenvolvimento de software. Abaixo ser\u00e3o descritos cada um desses passos. flowchart LR A(Planejamento) ==> B(Implementa\u00e7\u00e3o) ==> C(Teste) E ==> A C ==> E(Implanta\u00e7\u00e3o e Manuten\u00e7\u00e3o) Figura 1 : Ciclo de vida do desenvolvimento de software. Planejamento Todo projeto come\u00e7a com a ideia, que \u00e9 desenvolvida por meio de discuss\u00f5es e pesquisas. Nesse ponto devem estar envolvidos todos os interessados com o projeto (quando poss\u00edvel), desde os usu\u00e1rios at\u00e9 a equipe de desenvolvimento, passando pela equipe de design. Ou, s\u00f3 voc\u00ea mesmo, caso seja o desenvolvimento solit\u00e1rio. Nessa etapa tudo dever\u00e1 ser anotado, desenhado e descrito. Voc\u00ea pode precisar de uma ferramenta de cria\u00e7\u00e3o de mapas mentais e diagramas, al\u00e9m de um sistema de comunica\u00e7\u00e3o. Depois de definir uma ideia geral, ela ser\u00e1 dividida em v\u00e1rias ideias menores, contendo \"problemas\", ou issues , que precisam ser resolvidas. Uma issue pode ser, por exemplo, uma funcionalidade do software ou mesmo parte dela. Com um conjunto de issues em m\u00e3os, devemos organiz\u00e1-las em milestones (marcos) e releases (lan\u00e7amentos) de acordo com a prioridade, necessidade e dificuldade. Tal divis\u00e3o nos ajudar\u00e1 a definir o que ir\u00e1 ser realizado primeiro. Ferramentas whimsical : Cria\u00e7\u00e3o de diagramas. Github : Hospedagem do reposit\u00f3rio e cria\u00e7\u00e3o de issues. Implementa\u00e7\u00e3o Esta \u00e9 a etapa real de resolu\u00e7\u00e3o das issues . Nela ser\u00e1 realizada a codifica\u00e7\u00e3o e a revis\u00e3o do c\u00f3digo gerado. Nessa etapa geralmente s\u00e3o utilizados um ambiente de desenvolvimento e uma ferramenta de controle de vers\u00e3o (geralmente o git). Quando a resolu\u00e7\u00e3o da mesma requer o desenvolvimento de software, precisamos criar a funcionalidade requerida atrav\u00e9s da escrita de c\u00f3digo, bem como de testes e documenta\u00e7\u00e3o. Al\u00e9m disso, somente a utiliza\u00e7\u00e3o do git n\u00e3o resolver\u00e1 o problema de controle de vers\u00e3o e trabalho em grupo, devemos adotar um padr\u00e3o de fluxo de ramifica\u00e7\u00f5es. O padr\u00e3o mais utilizado atualmente \u00e9 o gitflow . No entanto, podemos utilizar vers\u00f5es mais simplificadas, como o github workflow . Na Figura 2 \u00e9 apresentado o detalhamento da etapa de implementa\u00e7\u00e3o. flowchart TB A([issue]) ==> C C[C\u00f3digo principal] ==> |banch| D(Codifica\u00e7\u00e3o) ==>|commit| D D ==>|pull request| F(Revis\u00e3o) ==> |corre\u00e7\u00e3o| D F ==> |merge| C Figura 2 : Etapa de implementa\u00e7\u00e3o. Para cada issue , voc\u00ea dever\u00e1 criar uma branch , que guardar\u00e1 uma c\u00f3pia do c\u00f3digo principal do software naquele momento. Cada modifica\u00e7\u00e3o inserida ser\u00e1 guardada atrav\u00e9s da cria\u00e7\u00e3o de um commit . Depois de ter codificado o suficiente para dar como encerrada a issue , voc\u00ea dever\u00e1 efetuar um pull-request . Nesse ponto, o c\u00f3digo \u00e9 enviado para uma equipe respons\u00e1vel pela realiza\u00e7\u00e3o de uma s\u00e9rie de testes e an\u00e1lises, para confirma\u00e7\u00e3o da resolu\u00e7\u00e3o da issue ou mesmo requisi\u00e7\u00e3o de corre\u00e7\u00f5es. Quando forem requisitadas corre\u00e7\u00f5es, voltaremos a codifica\u00e7\u00e3o, efetuaremos as modifica\u00e7\u00f5es necess\u00e1rias e retornaremos a revis\u00e3o. Quando tudo estiver funcionando como deveria, \u00e9 hora de inserir as modifica\u00e7\u00f5es no c\u00f3digo principal atrav\u00e9s do merge . Nesta etapa tamb\u00e9m precisaremos utilizar uma ferramenta para monitorar a resolu\u00e7\u00e3o das issues. Uma \u00f3tima ferramenta s\u00e3o quadros Kaban. Para o uso em desenvolvimento de software, geralmente tal quadro cont\u00e9m as seguintes etapas: To do : issues que ainda entrar\u00e3o em processo de desenvolvimento. In progress : issues que j\u00e1 entraram em processo de desenvolvimento, ou seja, existe algu\u00e9m codificando ou realizando tal tarefa. Review in progress : depois que a issue foi resolvida, \u00e9 enviada para uma equipe, respons\u00e1vel pela realiza\u00e7\u00e3o de uma s\u00e9rie de testes e an\u00e1lises, para confirma\u00e7\u00e3o da resolu\u00e7\u00e3o da issue. Review approved : ap\u00f3s a verifica\u00e7\u00e3o da resolu\u00e7\u00e3o da issue , os revisores podem aprovar a tarefa. Desse modo, o c\u00f3digo poder\u00e1 ser anexado ao c\u00f3digo principal, no reposit\u00f3rio central. Done : uma vez que o c\u00f3digo foi anexado ao c\u00f3digo principal, podemos dar como resolvida aquela issue . Ferramentas Visual Studio Code : Ambiente de desenvolvimento. Jupyter Lab : Ambiente de desenvolvimento para projetos de ci\u00eancia de dados. Git : Sistema de controle de vers\u00e3o. Github : Cria\u00e7\u00e3o de quadro Kanban atrav\u00e9s da \u00e1rea de projetos. gitflow : Padr\u00e3o geral para fluxo de ramifica\u00e7\u00f5es. github workflow : Varia\u00e7\u00e3o do gitflow. Teste Para tornar o c\u00f3digo est\u00e1vel e robusto, torna-se necess\u00e1ria a execu\u00e7\u00e3o de testes. Nesta etapa os defeitos do produto s\u00e3o relatados, rastreados, corrigidos e retestados, at\u00e9 que o produto atinja os padr\u00f5es de qualidade definidos. Cada linguagem tem suas ferramentas especiais aqui e voc\u00ea tamb\u00e9m pode utilizar ferramentas de integra\u00e7\u00e3o cont\u00ednua para automatizar parte desta tarefa. Implanta\u00e7\u00e3o e manuten\u00e7\u00e3o Uma vez que o produto esteja testado e pronto para ser implantado, ele \u00e9 lan\u00e7ado formalmente. Geralmente, a implanta\u00e7\u00e3o do produto acontece em etapas de acordo com a estrat\u00e9gia de neg\u00f3cios dessa organiza\u00e7\u00e3o. O produto pode ser lan\u00e7ado primeiro em um segmento limitado e testado no ambiente real de neg\u00f3cios. Em seguida, com base no feedback, o produto pode ser lan\u00e7ado como est\u00e1 ou com melhorias sugeridas no segmento de mercado-alvo. Ap\u00f3s o lan\u00e7amento do produto, \u00e9 feita sua manuten\u00e7\u00e3o. Esse \u00e9 o momento de olhar para tr\u00e1s e verificar qual etapa do trabalho precisa ser melhorada. Assim como a etapa de teste, existem ferramentas dependendo da linguagem e nesse caso tamb\u00e9m pode-se automatizar essa tarefa. #dicas #desenvolvimento de software .md-typeset .blogging-tags-grid { display: flex; flex-direction: row; flex-wrap: wrap; gap: 8px; margin-top: 5px; } .md-typeset .blogging-tag { color: var(--md-typeset-color); background-color: var(--md-typeset-code-color); } .md-typeset .blogging-tag code { border-radius: 5px; }","title":"Ciclo de desenvolvimento de software"},{"location":"blog/2022/software-development-workflow/#ciclo-de-desenvolvimento-de-software","text":"Independente do tipo, para iniciar um projeto que envolve desenvolvimento de software com qualidade \u00e9 necess\u00e1rio que alguns protocolos sejam seguidos. Nesse artigo eu tento citar o fluxo de trabalho que utilizo no desenvolvimento dos meus projetos pessoais de software. Al\u00e9m disso, apresento as ferramentas que utilizo em cada uma das etapas. Notas Artigo destinado a pessoas com o conhecimento m\u00ednimo em ferramentas de controle de vers\u00e3o. Alguns termos s\u00e3o apresentados em ingl\u00eas quando n\u00e3o encontradas palavras adequadas para tradu\u00e7\u00e3o. Como trata-se do desenvolvimento de software, a cria\u00e7\u00e3o do reposit\u00f3rio de c\u00f3digo n\u00e3o ser\u00e1 mencionada, sendo o passo 0 do ciclo apresentado. Na Figura 1 \u00e9 apresentada uma vis\u00e3o geral do fluxo que uso no desenvolvimento de software. Abaixo ser\u00e3o descritos cada um desses passos. flowchart LR A(Planejamento) ==> B(Implementa\u00e7\u00e3o) ==> C(Teste) E ==> A C ==> E(Implanta\u00e7\u00e3o e Manuten\u00e7\u00e3o) Figura 1 : Ciclo de vida do desenvolvimento de software.","title":"Ciclo de desenvolvimento de software"},{"location":"blog/2022/software-development-workflow/#planejamento","text":"Todo projeto come\u00e7a com a ideia, que \u00e9 desenvolvida por meio de discuss\u00f5es e pesquisas. Nesse ponto devem estar envolvidos todos os interessados com o projeto (quando poss\u00edvel), desde os usu\u00e1rios at\u00e9 a equipe de desenvolvimento, passando pela equipe de design. Ou, s\u00f3 voc\u00ea mesmo, caso seja o desenvolvimento solit\u00e1rio. Nessa etapa tudo dever\u00e1 ser anotado, desenhado e descrito. Voc\u00ea pode precisar de uma ferramenta de cria\u00e7\u00e3o de mapas mentais e diagramas, al\u00e9m de um sistema de comunica\u00e7\u00e3o. Depois de definir uma ideia geral, ela ser\u00e1 dividida em v\u00e1rias ideias menores, contendo \"problemas\", ou issues , que precisam ser resolvidas. Uma issue pode ser, por exemplo, uma funcionalidade do software ou mesmo parte dela. Com um conjunto de issues em m\u00e3os, devemos organiz\u00e1-las em milestones (marcos) e releases (lan\u00e7amentos) de acordo com a prioridade, necessidade e dificuldade. Tal divis\u00e3o nos ajudar\u00e1 a definir o que ir\u00e1 ser realizado primeiro. Ferramentas whimsical : Cria\u00e7\u00e3o de diagramas. Github : Hospedagem do reposit\u00f3rio e cria\u00e7\u00e3o de issues.","title":" Planejamento"},{"location":"blog/2022/software-development-workflow/#implementacao","text":"Esta \u00e9 a etapa real de resolu\u00e7\u00e3o das issues . Nela ser\u00e1 realizada a codifica\u00e7\u00e3o e a revis\u00e3o do c\u00f3digo gerado. Nessa etapa geralmente s\u00e3o utilizados um ambiente de desenvolvimento e uma ferramenta de controle de vers\u00e3o (geralmente o git). Quando a resolu\u00e7\u00e3o da mesma requer o desenvolvimento de software, precisamos criar a funcionalidade requerida atrav\u00e9s da escrita de c\u00f3digo, bem como de testes e documenta\u00e7\u00e3o. Al\u00e9m disso, somente a utiliza\u00e7\u00e3o do git n\u00e3o resolver\u00e1 o problema de controle de vers\u00e3o e trabalho em grupo, devemos adotar um padr\u00e3o de fluxo de ramifica\u00e7\u00f5es. O padr\u00e3o mais utilizado atualmente \u00e9 o gitflow . No entanto, podemos utilizar vers\u00f5es mais simplificadas, como o github workflow . Na Figura 2 \u00e9 apresentado o detalhamento da etapa de implementa\u00e7\u00e3o. flowchart TB A([issue]) ==> C C[C\u00f3digo principal] ==> |banch| D(Codifica\u00e7\u00e3o) ==>|commit| D D ==>|pull request| F(Revis\u00e3o) ==> |corre\u00e7\u00e3o| D F ==> |merge| C Figura 2 : Etapa de implementa\u00e7\u00e3o. Para cada issue , voc\u00ea dever\u00e1 criar uma branch , que guardar\u00e1 uma c\u00f3pia do c\u00f3digo principal do software naquele momento. Cada modifica\u00e7\u00e3o inserida ser\u00e1 guardada atrav\u00e9s da cria\u00e7\u00e3o de um commit . Depois de ter codificado o suficiente para dar como encerrada a issue , voc\u00ea dever\u00e1 efetuar um pull-request . Nesse ponto, o c\u00f3digo \u00e9 enviado para uma equipe respons\u00e1vel pela realiza\u00e7\u00e3o de uma s\u00e9rie de testes e an\u00e1lises, para confirma\u00e7\u00e3o da resolu\u00e7\u00e3o da issue ou mesmo requisi\u00e7\u00e3o de corre\u00e7\u00f5es. Quando forem requisitadas corre\u00e7\u00f5es, voltaremos a codifica\u00e7\u00e3o, efetuaremos as modifica\u00e7\u00f5es necess\u00e1rias e retornaremos a revis\u00e3o. Quando tudo estiver funcionando como deveria, \u00e9 hora de inserir as modifica\u00e7\u00f5es no c\u00f3digo principal atrav\u00e9s do merge . Nesta etapa tamb\u00e9m precisaremos utilizar uma ferramenta para monitorar a resolu\u00e7\u00e3o das issues. Uma \u00f3tima ferramenta s\u00e3o quadros Kaban. Para o uso em desenvolvimento de software, geralmente tal quadro cont\u00e9m as seguintes etapas: To do : issues que ainda entrar\u00e3o em processo de desenvolvimento. In progress : issues que j\u00e1 entraram em processo de desenvolvimento, ou seja, existe algu\u00e9m codificando ou realizando tal tarefa. Review in progress : depois que a issue foi resolvida, \u00e9 enviada para uma equipe, respons\u00e1vel pela realiza\u00e7\u00e3o de uma s\u00e9rie de testes e an\u00e1lises, para confirma\u00e7\u00e3o da resolu\u00e7\u00e3o da issue. Review approved : ap\u00f3s a verifica\u00e7\u00e3o da resolu\u00e7\u00e3o da issue , os revisores podem aprovar a tarefa. Desse modo, o c\u00f3digo poder\u00e1 ser anexado ao c\u00f3digo principal, no reposit\u00f3rio central. Done : uma vez que o c\u00f3digo foi anexado ao c\u00f3digo principal, podemos dar como resolvida aquela issue . Ferramentas Visual Studio Code : Ambiente de desenvolvimento. Jupyter Lab : Ambiente de desenvolvimento para projetos de ci\u00eancia de dados. Git : Sistema de controle de vers\u00e3o. Github : Cria\u00e7\u00e3o de quadro Kanban atrav\u00e9s da \u00e1rea de projetos. gitflow : Padr\u00e3o geral para fluxo de ramifica\u00e7\u00f5es. github workflow : Varia\u00e7\u00e3o do gitflow.","title":" Implementa\u00e7\u00e3o"},{"location":"blog/2022/software-development-workflow/#teste","text":"Para tornar o c\u00f3digo est\u00e1vel e robusto, torna-se necess\u00e1ria a execu\u00e7\u00e3o de testes. Nesta etapa os defeitos do produto s\u00e3o relatados, rastreados, corrigidos e retestados, at\u00e9 que o produto atinja os padr\u00f5es de qualidade definidos. Cada linguagem tem suas ferramentas especiais aqui e voc\u00ea tamb\u00e9m pode utilizar ferramentas de integra\u00e7\u00e3o cont\u00ednua para automatizar parte desta tarefa.","title":" Teste"},{"location":"blog/2022/software-development-workflow/#implantacao-e-manutencao","text":"Uma vez que o produto esteja testado e pronto para ser implantado, ele \u00e9 lan\u00e7ado formalmente. Geralmente, a implanta\u00e7\u00e3o do produto acontece em etapas de acordo com a estrat\u00e9gia de neg\u00f3cios dessa organiza\u00e7\u00e3o. O produto pode ser lan\u00e7ado primeiro em um segmento limitado e testado no ambiente real de neg\u00f3cios. Em seguida, com base no feedback, o produto pode ser lan\u00e7ado como est\u00e1 ou com melhorias sugeridas no segmento de mercado-alvo. Ap\u00f3s o lan\u00e7amento do produto, \u00e9 feita sua manuten\u00e7\u00e3o. Esse \u00e9 o momento de olhar para tr\u00e1s e verificar qual etapa do trabalho precisa ser melhorada. Assim como a etapa de teste, existem ferramentas dependendo da linguagem e nesse caso tamb\u00e9m pode-se automatizar essa tarefa. #dicas #desenvolvimento de software .md-typeset .blogging-tags-grid { display: flex; flex-direction: row; flex-wrap: wrap; gap: 8px; margin-top: 5px; } .md-typeset .blogging-tag { color: var(--md-typeset-color); background-color: var(--md-typeset-code-color); } .md-typeset .blogging-tag code { border-radius: 5px; }","title":" Implanta\u00e7\u00e3o e manuten\u00e7\u00e3o"},{"location":"blog/2023/preparacao-de-ambiente-python/","text":"Prepara\u00e7\u00e3o do ambiente Introdu\u00e7\u00e3o Ao aprender uma linguagem de programa\u00e7\u00e3o, o foco \u00e9 essencialmente entender a sintaxe, o estilo de c\u00f3digo e os conceitos subjacentes. Com o tempo, voc\u00ea se torna suficientemente confort\u00e1vel com a linguagem e come\u00e7a a escrever programas que resolvem problemas realmente interessantes. No entanto, para avan\u00e7ar para essa etapa, h\u00e1 um aspecto que pode ser subestimado que \u00e9 como construir o ambiente certo . Um ambiente que imp\u00f5e boas pr\u00e1ticas de engenharia de software, melhora a produtividade e facilita a colabora\u00e7\u00e3o. Outra caracter\u00edstica importante \u00e9 que este ambiente suporte o trabalho simult\u00e3neo em v\u00e1rios projetos, utilizando diferentes linguagens de programa\u00e7\u00e3o e vers\u00f5es das mesmas. Al\u00e9m de bibliotecas e ferramentas espec\u00edficas para cada um dos projetos. Para que um projeto n\u00e3o interfira em outro, eles devem ser isolados de alguma forma. Quando se trata da linguagem Python, v\u00e1rios projetos de c\u00f3digo aberto surgiram nos \u00faltimos anos e visam facilitar o gerenciamento de vers\u00f5es , depend\u00eancias e ambientes virtuais . Fonte: xkcd/1987 . Afim de criar um ambiente que facilite a colabora\u00e7\u00e3o, imponha boas pr\u00e1ticas, melhore a produtividade e facilite a colabora\u00e7\u00e3o, utilizaremos as seguintes ferramentas: ubuntu : ambiente mais pr\u00f3ximo de ambientes de produ\u00e7\u00e3o; pyenv : gerencia diferentes vers\u00f5es do Python na mesma m\u00e1quina; poetry : gerencia ambientes virtuais e as depend\u00eancias de tais ambientes; git : sistema colaborativo e descentralizado de controle de vers\u00f5es. Vamos ent\u00e3o seguir os seguintes passos: Instalar o Ubuntu 20.04 ; Instalar o pyenv ; Instalar o poetry ; Configurar o git . Nota A instala\u00e7\u00e3o do ambiente depender\u00e1 do seu sistema operacional. Caso o seu sistema operacional seja o Windows, siga todos os passos. Caso use o sistema operacional Linux ou Mac, inicie da se\u00e7\u00e3o Instalar o pyenv . 1. Instalar Ubuntu 20.04 Ativar recursos do Windows Iniciaremos ativando os recursos do Windows necess\u00e1rios para prepara\u00e7\u00e3o do ambiente. Para isto, v\u00e1 at\u00e9 o menu iniciar e pesquise por \"Ativar ou desativar recursos do Windows\" ( Turn windows features ). Depois disso, clique na op\u00e7\u00e3o em destaque, como mostrado na imagem abaixo: Aparecer\u00e1 a janela de ativa\u00e7\u00e3o e desativa\u00e7\u00e3o de recursos do windows, como mostrado abaixo: Voc\u00ea precisar\u00e1 marcar as seguintes op\u00e7\u00f5es: Plataforma do Hipervisor do Windows ( Hiper-V ) Plataforma de M\u00e1quina virtual ( Virtual Machine Platform ) Subsistema do Windows para linux ( Windows subsystem for Linux ) Com as op\u00e7\u00f5es selecionadas, clique no bot\u00e3o OK . Depois que as altera\u00e7\u00f5es forem conclu\u00eddas, ser\u00e1 solicitado o reinicio da m\u00e1quina. Clique no bot\u00e3o Reiniciar agora . Instalar Ubuntu 20.04 Ap\u00f3s reiniciar o computador, v\u00e1 novamente at\u00e9 o menu iniciar e pesquise por \"microsoft store\". Depois disso, clique na op\u00e7\u00e3o em destaque: Aparecer\u00e1 a janela da loja de aplicativos ( microsoft store ). Na barra de pesquisa, procure por \"Ubuntu\" e selecione a op\u00e7\u00e3o \"Ubuntu 20.04.4 LTS\": Depois disso, clique no bot\u00e3o Adquirir ( get ) e aguarde a instala\u00e7\u00e3o. Iniciar o Ubuntu Para iniciar o Ubuntu, v\u00e1 novamente at\u00e9 o menu iniciar e pesquise por \"Ubuntu\". Clique na op\u00e7\u00e3o em destaque. Aguarde as configura\u00e7\u00f5es serem finalizadas. Neste momento, ser\u00e1 solicitado um novo nome de usu\u00e1rio e uma nova senha para o Ubuntu. Dica Ao digitar a senha, nada aparecer\u00e1. N\u00e3o se preocupe, pois este \u00e9 um recurso de seguran\u00e7a que n\u00e3o exibe os caracteres digitados. Pronto! Agora voc\u00ea j\u00e1 pode utilizar o Ubuntu instalado na sua m\u00e1quina. Info Caso voc\u00ea encontre o erro 0x800701bc , acesse este link para atualizar a vers\u00e3o do wsl instalada na sua m\u00e1quina. Depois disso, tente abrir o Ubuntu novamente. 2. Instalar o pyenv Antes de instalar o pyenv , iremos configurar o comando de chamada do Python. Por padr\u00e3o, o Ubuntu 20.04 vem com o comando python3 , mas para facilitar, iremos instalar uma aplica\u00e7\u00e3o que cria um link simb\u00f3lico entre o comando python e o comando python3 , atrav\u00e9s do seguinte comando: 1 sudo apt install python-is-python3 Agora podemos utilizar o comando python normalmente. Tente usar 1 python -V Vamos iniciar clonando o reposit\u00f3rio do pyenv: 1 git clone https://github.com/pyenv/pyenv.git ~/.pyenv Depois disso, execute os seguintes comandos para configura\u00e7\u00e3o do bash: 1 2 3 echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.bashrc echo 'command -v pyenv >/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.bashrc echo 'eval \"$(pyenv init -)\"' >> ~/.bashrc Por fim, iremos reiniciar o SHELL : 1 exec \"$SHELL\" Depois desse comando feche o Ubuntu e abra novamente. Instalar depend\u00eancias de build do pyenv Para que o pyenv funcione perfeitamente, voc\u00ea precisa instalar as depend\u00eancias de build, necess\u00e1rias para compilar as vers\u00f5es do python. Utilize o seguinte comando: 1 sudo apt-get update; sudo apt-get install make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev Instalar o python 3.8.10 Agora podemos instalar vers\u00f5es do python. Antes de tudo, pode verificar quais vers\u00f5es tem instalada com o comando pyenv versions. Voc\u00ea ver\u00e1 somente a vers\u00e3o do sistema. No entanto, precisamos instalar a vers\u00e3o 3.8.10. Para tal, utilize o seguinte comando: 1 pyenv install 3.8.10 Prontinho, agora precisamos mudar para vers\u00e3o instalada utilizando o comando: 1 pyenv global 3.8.10 Para verificar se a sele\u00e7\u00e3o ocorreu de maneira correta, utilize o comando: 1 pyenv versions A sa\u00edda deste comando dever\u00e1 mostrar qual vers\u00e3o do python est\u00e1 selecionada como global. 3. Instalar o poetry Para realizar a gest\u00e3o de depend\u00eancias e ambientes virtuais precisamos instalar o Poetry. Fazemos isso atrav\u00e9s do seguinte comando: 1 curl -sSL https://install.python-poetry.org | python - Depois disso, precisamos colocar o poetry no path usando o seguinte comando: 1 echo 'export PATH=\"$HOME/.poetry/bin:$PATH\"' >> ~/.bashrc Voc\u00ea precisar\u00e1 fechar e abrir o Ubuntu para seguir para o pr\u00f3ximo passo. Antes de continuar, verifique se o poetry foi instalado corretamente, digitando o comando 1 poetry A sa\u00edda deste comando \u00e9 o manual de uso da ferramenta. Caso tudo ocorra bem, prossiga para o pr\u00f3ximo passo. 4. Configurar o git Identidade Por padr\u00e3o, o Ubuntu 20.04 vem com o git instalado. Desse modo, precisamos apenas realizar a configura\u00e7\u00e3o de identidade. Isto \u00e9 necess\u00e1rio para que cada commit seja identificado de maneira correta. Para realizar a configura\u00e7\u00e3o utilize o seguinte comando, substituindo Fulano de Tal pelo seu nome e sobrenome: 1 git config --global user.name \"Fulano de Tal\" Depois disso, configure o seu email atrav\u00e9s do seguinte comando, substituindo fulanodetal@exemplo.br pelo seu email: 1 git config --global user.email fulanodetal@exemplo.br Dica Caso erre a configura\u00e7\u00e3o, n\u00e3o se preocupe, pois voc\u00ea poder\u00e1 inseri-la novamente apertando a tecla de movimenta\u00e7\u00e3o para cima e corrigindo as informa\u00e7\u00f5es. SSH Gerar chave SSH Al\u00e9m da configura\u00e7\u00e3o de identidade, \u00e9 necess\u00e1rio efetuar gera\u00e7\u00e3o de chave SSH e adicion\u00e1-la ao github. Para isto, abra o terminal e digite o seguinte comando, substituindo o endere\u00e7o de e-mail pelo seu Github. 1 ssh-keygen -t ed25519 -C \"fulanodetal@exemplo.br\" Isto cria uma nova chave SSH, usando o nome de e-mail fornecido como uma etiqueta. Quando aparecer a solicita\u00e7\u00e3o \" Enter file in which to save the key \", pressione Enter . O local padr\u00e3o do arquivo ser\u00e1 aceito. Tamb\u00e9m ser\u00e1 requisitado uma senha para uso da credencial SSH. Caso n\u00e3o queira inserir, apenas aperte Enter . Adicionar chave SSH ao Github Ap\u00f3s gerar um par de chaves SSH (uma p\u00fablica e uma privada), voc\u00ea deve adicionar a chave p\u00fablica no github para habilitar o acesso SSH para a sua conta. V\u00e1 at\u00e9 o Ubuntu e utilize o seguinte comando para mostrar o conte\u00fado da chave SSH criada anteriormente: 1 cat ~/.ssh/id_ed25519.pub Selecione o texto de sa\u00edda do comando e copie para \u00e1rea de transfer\u00eancia. Agora iremos inserir a chave copiada no github . Para isso, abra o github.com , clique na sua foto de perfil e, em seguida, clique em Settings : Na se\u00e7\u00e3o Access , da sidebar , clique em SSH and GPG keys . Clique em New SSH key (Nova chave SSH) ou Add SSH key (Adicionar chave SSH): No campo Title , adicione uma etiqueta descritiva para nova chave. Cole sua chave no campo Key : Clique em Add SSH key (adicionar chave SSH). Se solicitado, confirme sua senha do github . Conclus\u00e3o Se tudo ocorreu bem, finalizamos a nossa jornada de prepara\u00e7\u00e3o do ambiente. Agora voc\u00ea est\u00e1 preparado para construir e colaborar com projetos Python de maneira produtiva e eficiente. O pr\u00f3ximo passo \u00e9 criar um reposit\u00f3rio a partir do seguinte template , que ser\u00e1 utilizado ao longo do curso, e efetuar o clone na sua m\u00e1quina. Se voc\u00ea tem d\u00favidas de como criar reposit\u00f3rios a partir de templates, acesse a documenta\u00e7\u00e3o oficial do github. Refer\u00eancias Managing Version, Virtual Environments and Dependencies with Pyenv and Poetry Poetry - Python dependency management and packaging made easy. Simple Python Version Management: pyenv Come\u00e7ando - Configura\u00e7\u00e3o inicial do Git Gerar uma nova chave SSH e adicion\u00e1-la ao ssh-agent Adicionar uma nova chave SSH \u00e0 sua conta do GitHub","title":"Prepara\u00e7\u00e3o do ambiente"},{"location":"blog/2023/preparacao-de-ambiente-python/#preparacao-do-ambiente","text":"","title":"Prepara\u00e7\u00e3o do ambiente"},{"location":"blog/2023/preparacao-de-ambiente-python/#introducao","text":"Ao aprender uma linguagem de programa\u00e7\u00e3o, o foco \u00e9 essencialmente entender a sintaxe, o estilo de c\u00f3digo e os conceitos subjacentes. Com o tempo, voc\u00ea se torna suficientemente confort\u00e1vel com a linguagem e come\u00e7a a escrever programas que resolvem problemas realmente interessantes. No entanto, para avan\u00e7ar para essa etapa, h\u00e1 um aspecto que pode ser subestimado que \u00e9 como construir o ambiente certo . Um ambiente que imp\u00f5e boas pr\u00e1ticas de engenharia de software, melhora a produtividade e facilita a colabora\u00e7\u00e3o. Outra caracter\u00edstica importante \u00e9 que este ambiente suporte o trabalho simult\u00e3neo em v\u00e1rios projetos, utilizando diferentes linguagens de programa\u00e7\u00e3o e vers\u00f5es das mesmas. Al\u00e9m de bibliotecas e ferramentas espec\u00edficas para cada um dos projetos. Para que um projeto n\u00e3o interfira em outro, eles devem ser isolados de alguma forma. Quando se trata da linguagem Python, v\u00e1rios projetos de c\u00f3digo aberto surgiram nos \u00faltimos anos e visam facilitar o gerenciamento de vers\u00f5es , depend\u00eancias e ambientes virtuais . Fonte: xkcd/1987 . Afim de criar um ambiente que facilite a colabora\u00e7\u00e3o, imponha boas pr\u00e1ticas, melhore a produtividade e facilite a colabora\u00e7\u00e3o, utilizaremos as seguintes ferramentas: ubuntu : ambiente mais pr\u00f3ximo de ambientes de produ\u00e7\u00e3o; pyenv : gerencia diferentes vers\u00f5es do Python na mesma m\u00e1quina; poetry : gerencia ambientes virtuais e as depend\u00eancias de tais ambientes; git : sistema colaborativo e descentralizado de controle de vers\u00f5es. Vamos ent\u00e3o seguir os seguintes passos: Instalar o Ubuntu 20.04 ; Instalar o pyenv ; Instalar o poetry ; Configurar o git . Nota A instala\u00e7\u00e3o do ambiente depender\u00e1 do seu sistema operacional. Caso o seu sistema operacional seja o Windows, siga todos os passos. Caso use o sistema operacional Linux ou Mac, inicie da se\u00e7\u00e3o Instalar o pyenv .","title":"Introdu\u00e7\u00e3o"},{"location":"blog/2023/preparacao-de-ambiente-python/#1-instalar-ubuntu-2004","text":"","title":"1. Instalar Ubuntu 20.04"},{"location":"blog/2023/preparacao-de-ambiente-python/#ativar-recursos-do-windows","text":"Iniciaremos ativando os recursos do Windows necess\u00e1rios para prepara\u00e7\u00e3o do ambiente. Para isto, v\u00e1 at\u00e9 o menu iniciar e pesquise por \"Ativar ou desativar recursos do Windows\" ( Turn windows features ). Depois disso, clique na op\u00e7\u00e3o em destaque, como mostrado na imagem abaixo: Aparecer\u00e1 a janela de ativa\u00e7\u00e3o e desativa\u00e7\u00e3o de recursos do windows, como mostrado abaixo: Voc\u00ea precisar\u00e1 marcar as seguintes op\u00e7\u00f5es: Plataforma do Hipervisor do Windows ( Hiper-V ) Plataforma de M\u00e1quina virtual ( Virtual Machine Platform ) Subsistema do Windows para linux ( Windows subsystem for Linux ) Com as op\u00e7\u00f5es selecionadas, clique no bot\u00e3o OK . Depois que as altera\u00e7\u00f5es forem conclu\u00eddas, ser\u00e1 solicitado o reinicio da m\u00e1quina. Clique no bot\u00e3o Reiniciar agora .","title":"Ativar recursos do Windows"},{"location":"blog/2023/preparacao-de-ambiente-python/#instalar-ubuntu-2004","text":"Ap\u00f3s reiniciar o computador, v\u00e1 novamente at\u00e9 o menu iniciar e pesquise por \"microsoft store\". Depois disso, clique na op\u00e7\u00e3o em destaque: Aparecer\u00e1 a janela da loja de aplicativos ( microsoft store ). Na barra de pesquisa, procure por \"Ubuntu\" e selecione a op\u00e7\u00e3o \"Ubuntu 20.04.4 LTS\": Depois disso, clique no bot\u00e3o Adquirir ( get ) e aguarde a instala\u00e7\u00e3o.","title":"Instalar Ubuntu 20.04"},{"location":"blog/2023/preparacao-de-ambiente-python/#iniciar-o-ubuntu","text":"Para iniciar o Ubuntu, v\u00e1 novamente at\u00e9 o menu iniciar e pesquise por \"Ubuntu\". Clique na op\u00e7\u00e3o em destaque. Aguarde as configura\u00e7\u00f5es serem finalizadas. Neste momento, ser\u00e1 solicitado um novo nome de usu\u00e1rio e uma nova senha para o Ubuntu. Dica Ao digitar a senha, nada aparecer\u00e1. N\u00e3o se preocupe, pois este \u00e9 um recurso de seguran\u00e7a que n\u00e3o exibe os caracteres digitados. Pronto! Agora voc\u00ea j\u00e1 pode utilizar o Ubuntu instalado na sua m\u00e1quina. Info Caso voc\u00ea encontre o erro 0x800701bc , acesse este link para atualizar a vers\u00e3o do wsl instalada na sua m\u00e1quina. Depois disso, tente abrir o Ubuntu novamente.","title":"Iniciar o Ubuntu"},{"location":"blog/2023/preparacao-de-ambiente-python/#2-instalar-o-pyenv","text":"Antes de instalar o pyenv , iremos configurar o comando de chamada do Python. Por padr\u00e3o, o Ubuntu 20.04 vem com o comando python3 , mas para facilitar, iremos instalar uma aplica\u00e7\u00e3o que cria um link simb\u00f3lico entre o comando python e o comando python3 , atrav\u00e9s do seguinte comando: 1 sudo apt install python-is-python3 Agora podemos utilizar o comando python normalmente. Tente usar 1 python -V Vamos iniciar clonando o reposit\u00f3rio do pyenv: 1 git clone https://github.com/pyenv/pyenv.git ~/.pyenv Depois disso, execute os seguintes comandos para configura\u00e7\u00e3o do bash: 1 2 3 echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.bashrc echo 'command -v pyenv >/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.bashrc echo 'eval \"$(pyenv init -)\"' >> ~/.bashrc Por fim, iremos reiniciar o SHELL : 1 exec \"$SHELL\" Depois desse comando feche o Ubuntu e abra novamente.","title":"2. Instalar o pyenv"},{"location":"blog/2023/preparacao-de-ambiente-python/#instalar-dependencias-de-build-do-pyenv","text":"Para que o pyenv funcione perfeitamente, voc\u00ea precisa instalar as depend\u00eancias de build, necess\u00e1rias para compilar as vers\u00f5es do python. Utilize o seguinte comando: 1 sudo apt-get update; sudo apt-get install make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev","title":"Instalar depend\u00eancias de build do pyenv"},{"location":"blog/2023/preparacao-de-ambiente-python/#instalar-o-python-3810","text":"Agora podemos instalar vers\u00f5es do python. Antes de tudo, pode verificar quais vers\u00f5es tem instalada com o comando pyenv versions. Voc\u00ea ver\u00e1 somente a vers\u00e3o do sistema. No entanto, precisamos instalar a vers\u00e3o 3.8.10. Para tal, utilize o seguinte comando: 1 pyenv install 3.8.10 Prontinho, agora precisamos mudar para vers\u00e3o instalada utilizando o comando: 1 pyenv global 3.8.10 Para verificar se a sele\u00e7\u00e3o ocorreu de maneira correta, utilize o comando: 1 pyenv versions A sa\u00edda deste comando dever\u00e1 mostrar qual vers\u00e3o do python est\u00e1 selecionada como global.","title":"Instalar o python 3.8.10"},{"location":"blog/2023/preparacao-de-ambiente-python/#3-instalar-o-poetry","text":"Para realizar a gest\u00e3o de depend\u00eancias e ambientes virtuais precisamos instalar o Poetry. Fazemos isso atrav\u00e9s do seguinte comando: 1 curl -sSL https://install.python-poetry.org | python - Depois disso, precisamos colocar o poetry no path usando o seguinte comando: 1 echo 'export PATH=\"$HOME/.poetry/bin:$PATH\"' >> ~/.bashrc Voc\u00ea precisar\u00e1 fechar e abrir o Ubuntu para seguir para o pr\u00f3ximo passo. Antes de continuar, verifique se o poetry foi instalado corretamente, digitando o comando 1 poetry A sa\u00edda deste comando \u00e9 o manual de uso da ferramenta. Caso tudo ocorra bem, prossiga para o pr\u00f3ximo passo.","title":"3. Instalar o poetry"},{"location":"blog/2023/preparacao-de-ambiente-python/#4-configurar-o-git","text":"","title":"4. Configurar o git"},{"location":"blog/2023/preparacao-de-ambiente-python/#identidade","text":"Por padr\u00e3o, o Ubuntu 20.04 vem com o git instalado. Desse modo, precisamos apenas realizar a configura\u00e7\u00e3o de identidade. Isto \u00e9 necess\u00e1rio para que cada commit seja identificado de maneira correta. Para realizar a configura\u00e7\u00e3o utilize o seguinte comando, substituindo Fulano de Tal pelo seu nome e sobrenome: 1 git config --global user.name \"Fulano de Tal\" Depois disso, configure o seu email atrav\u00e9s do seguinte comando, substituindo fulanodetal@exemplo.br pelo seu email: 1 git config --global user.email fulanodetal@exemplo.br Dica Caso erre a configura\u00e7\u00e3o, n\u00e3o se preocupe, pois voc\u00ea poder\u00e1 inseri-la novamente apertando a tecla de movimenta\u00e7\u00e3o para cima e corrigindo as informa\u00e7\u00f5es.","title":"Identidade"},{"location":"blog/2023/preparacao-de-ambiente-python/#ssh","text":"","title":"SSH"},{"location":"blog/2023/preparacao-de-ambiente-python/#gerar-chave-ssh","text":"Al\u00e9m da configura\u00e7\u00e3o de identidade, \u00e9 necess\u00e1rio efetuar gera\u00e7\u00e3o de chave SSH e adicion\u00e1-la ao github. Para isto, abra o terminal e digite o seguinte comando, substituindo o endere\u00e7o de e-mail pelo seu Github. 1 ssh-keygen -t ed25519 -C \"fulanodetal@exemplo.br\" Isto cria uma nova chave SSH, usando o nome de e-mail fornecido como uma etiqueta. Quando aparecer a solicita\u00e7\u00e3o \" Enter file in which to save the key \", pressione Enter . O local padr\u00e3o do arquivo ser\u00e1 aceito. Tamb\u00e9m ser\u00e1 requisitado uma senha para uso da credencial SSH. Caso n\u00e3o queira inserir, apenas aperte Enter .","title":"Gerar chave SSH"},{"location":"blog/2023/preparacao-de-ambiente-python/#adicionar-chave-ssh-ao-github","text":"Ap\u00f3s gerar um par de chaves SSH (uma p\u00fablica e uma privada), voc\u00ea deve adicionar a chave p\u00fablica no github para habilitar o acesso SSH para a sua conta. V\u00e1 at\u00e9 o Ubuntu e utilize o seguinte comando para mostrar o conte\u00fado da chave SSH criada anteriormente: 1 cat ~/.ssh/id_ed25519.pub Selecione o texto de sa\u00edda do comando e copie para \u00e1rea de transfer\u00eancia. Agora iremos inserir a chave copiada no github . Para isso, abra o github.com , clique na sua foto de perfil e, em seguida, clique em Settings : Na se\u00e7\u00e3o Access , da sidebar , clique em SSH and GPG keys . Clique em New SSH key (Nova chave SSH) ou Add SSH key (Adicionar chave SSH): No campo Title , adicione uma etiqueta descritiva para nova chave. Cole sua chave no campo Key : Clique em Add SSH key (adicionar chave SSH). Se solicitado, confirme sua senha do github .","title":"Adicionar chave SSH ao Github"},{"location":"blog/2023/preparacao-de-ambiente-python/#conclusao","text":"Se tudo ocorreu bem, finalizamos a nossa jornada de prepara\u00e7\u00e3o do ambiente. Agora voc\u00ea est\u00e1 preparado para construir e colaborar com projetos Python de maneira produtiva e eficiente. O pr\u00f3ximo passo \u00e9 criar um reposit\u00f3rio a partir do seguinte template , que ser\u00e1 utilizado ao longo do curso, e efetuar o clone na sua m\u00e1quina. Se voc\u00ea tem d\u00favidas de como criar reposit\u00f3rios a partir de templates, acesse a documenta\u00e7\u00e3o oficial do github. Refer\u00eancias Managing Version, Virtual Environments and Dependencies with Pyenv and Poetry Poetry - Python dependency management and packaging made easy. Simple Python Version Management: pyenv Come\u00e7ando - Configura\u00e7\u00e3o inicial do Git Gerar uma nova chave SSH e adicion\u00e1-la ao ssh-agent Adicionar uma nova chave SSH \u00e0 sua conta do GitHub","title":"Conclus\u00e3o"},{"location":"listas/","text":"Listas Aqui voc\u00ea encontrar\u00e1 algumas listas que costumo guardar: Livros e artigos que li Itens para doa\u00e7\u00e3o Filmes que assisti Minha cole\u00e7\u00e3o de discos","title":"Listas"},{"location":"listas/#listas","text":"Aqui voc\u00ea encontrar\u00e1 algumas listas que costumo guardar: Livros e artigos que li Itens para doa\u00e7\u00e3o Filmes que assisti Minha cole\u00e7\u00e3o de discos","title":"Listas"},{"location":"listas/books/","text":"Livros T\u00edtulo P\u00e1ginas Nota Data final O Soldadinho de Chumbo 24 \u2605\u2605\u2605 18/01/1996 A Roupa Nova do Rei 24 \u2605\u2605\u2605 18/01/1996 O Guia do Mochileiro das Gal\u00e1xias 208 \u2605\u2605\u2605\u2605\u2605 19/08/2016 O Andar do B\u00eabado 324 \u2605\u2605\u2605\u2605\u2605 23/06/2016 A Culpa \u00e9 das Estrelas 288 \u2605\u2605\u2605 23/12/2013 O Restaurante no Fim do Universo 173 \u2605\u2605\u2605\u2605 22/09/2016 Como Mentir com Estatistica 160 \u2605\u2605\u2605\u2605\u2605 09/12/2016 O C\u00e9rebro Imperfeito 288 \u2605\u2605\u2605\u2605\u2605 28/12/2016 A Vida, o Universo e Tudo Mais 160 \u2605\u2605\u2605\u2605 02/01/2017 O Pequeno Pr\u00edncipe 96 \u2605\u2605\u2605\u2605\u2605 04/01/2017 O Mundo Assombrado pelos Dem\u00f4nios 512 \u2605\u2605\u2605\u2605\u2605 03/01/2017 A Arte da Guerra 152 \u2605\u2605\u2605 05/01/2017 O Homem Que Calculava 304 \u2605\u2605\u2605\u2605 07/01/2017 At\u00e9 Mais, e Obrigado pelos Peixes! 203 \u2605\u2605\u2605\u2605 09/01/2017 Praticamente Inofensiva 192 \u2605\u2605\u2605\u2605 12/01/2017 A M\u00e1quina do Tempo 126 \u2605\u2605\u2605 17/01/2017 E se? 325 \u2605\u2605\u2605\u2605\u2605 10/01/2017 O Teorema Katherine 304 \u2605\u2605\u2605\u2605 21/01/2017 A volta ao mundo em 80 dias 211 \u2605\u2605\u2605 23/02/2017 A Mais Pura Verdade Sobre a Desonestidade 280 \u2605\u2605\u2605\u2605\u2605 24/02/2017 Vinte mil l\u00e9guas submarinas 513 \u2605\u2605\u2605 27/02/2017 Previsivelmente Irracional 220 \u2605\u2605\u2605\u2605\u2605 01/06/2017 Subliminar 304 \u2605\u2605\u2605\u2605\u2605 29/12/2017 Outros jeitos de usar a boca 208 \u2605\u2605\u2605\u2605\u2605 30/12/2017 De Primatas a Astronautas 392 \u2605\u2605\u2605\u2605\u2605 01/01/2018 O m\u00ednimo do minimalismo 30 \u2605\u2605\u2605\u2605 01/01/2018 Minimalismo 2.0 32 \u2605\u2605\u2605 01/01/2018 Essencialismo 272 \u2605\u2605\u2605\u2605 01/01/2018 Minimalismo 47 \u2605\u2605\u2605 01/01/2018 O Gene Ego\u00edsta 544 \u2605\u2605\u2605\u2605\u2605 06/01/2018 Viagens de Gulliver 275 \u2605\u2605\u2605\u2605 07/01/2018 Vida Frugal 39 \u2605\u2605\u2605\u2605 20/08/2018 31 Dias Para Superar Seu Medo de Fazer Fotografia de Rua 50 \u2605\u2605\u2605 10/10/2018 L\u00e1 vem todo mundo 296 \u2605\u2605\u2605 28/01/2019 O Poder do H\u00e1bito 407 \u2605\u2605\u2605\u2605 11/12/2019 A Base Moral do Vegetarismo 64 \u2605\u2605\u2605 31/12/2019 Maus 296 \u2605\u2605\u2605\u2605\u2605 01/02/2019 As leis do acaso 304 \u2605\u2605\u2605\u2605 10/02/2020 Python 197 \u2605\u2605\u2605 25/07/2020 Sapiens 462 \u2605\u2605\u2605\u2605 10/04/2020 Homo Deus 448 \u2605\u2605\u2605\u2605 20/04/2020 Dom Casmurro 238 \u2605\u2605\u2605\u2605 05/05/2020 Mem\u00f3rias P\u00f3stumas de Br\u00e1s Cubas 224 \u2605\u2605\u2605 16/05/2020 O Universo Numa Casca de Noz 215 \u2605\u2605\u2605\u2605\u2605 11/07/2020 Dom Quixote 111 \u2605\u2605\u2605\u2605\u2605 25/07/2020 Uma Breve Hist\u00f3ria do Tempo 256 \u2605\u2605\u2605\u2605\u2605 26/07/2020 Uma nova hist\u00f3ria do tempo 224 \u2605\u2605\u2605\u2605\u2605 29/07/2020 Breves Respostas Para Grandes Quest\u00f5es 256 \u2605\u2605\u2605\u2605 01/08/2020 O Estrangeiro 126 \u2605\u2605\u2605\u2605 24/10/2020 A Arte Cavalheiresca do Arqueiro Zen 91 \u2605\u2605\u2605 01/11/2020 Sapiens: O nascimento da humanidade: 1 248 \u2605\u2605\u2605 09/02/2021 A arte de fazer acontecer 320 \u2605\u2605\u2605 08/02/2021 Estilo de Vida Minimalista 51 \u2605\u2605\u2605 30/01/2021","title":"Livros"},{"location":"listas/books/#livros","text":"T\u00edtulo P\u00e1ginas Nota Data final O Soldadinho de Chumbo 24 \u2605\u2605\u2605 18/01/1996 A Roupa Nova do Rei 24 \u2605\u2605\u2605 18/01/1996 O Guia do Mochileiro das Gal\u00e1xias 208 \u2605\u2605\u2605\u2605\u2605 19/08/2016 O Andar do B\u00eabado 324 \u2605\u2605\u2605\u2605\u2605 23/06/2016 A Culpa \u00e9 das Estrelas 288 \u2605\u2605\u2605 23/12/2013 O Restaurante no Fim do Universo 173 \u2605\u2605\u2605\u2605 22/09/2016 Como Mentir com Estatistica 160 \u2605\u2605\u2605\u2605\u2605 09/12/2016 O C\u00e9rebro Imperfeito 288 \u2605\u2605\u2605\u2605\u2605 28/12/2016 A Vida, o Universo e Tudo Mais 160 \u2605\u2605\u2605\u2605 02/01/2017 O Pequeno Pr\u00edncipe 96 \u2605\u2605\u2605\u2605\u2605 04/01/2017 O Mundo Assombrado pelos Dem\u00f4nios 512 \u2605\u2605\u2605\u2605\u2605 03/01/2017 A Arte da Guerra 152 \u2605\u2605\u2605 05/01/2017 O Homem Que Calculava 304 \u2605\u2605\u2605\u2605 07/01/2017 At\u00e9 Mais, e Obrigado pelos Peixes! 203 \u2605\u2605\u2605\u2605 09/01/2017 Praticamente Inofensiva 192 \u2605\u2605\u2605\u2605 12/01/2017 A M\u00e1quina do Tempo 126 \u2605\u2605\u2605 17/01/2017 E se? 325 \u2605\u2605\u2605\u2605\u2605 10/01/2017 O Teorema Katherine 304 \u2605\u2605\u2605\u2605 21/01/2017 A volta ao mundo em 80 dias 211 \u2605\u2605\u2605 23/02/2017 A Mais Pura Verdade Sobre a Desonestidade 280 \u2605\u2605\u2605\u2605\u2605 24/02/2017 Vinte mil l\u00e9guas submarinas 513 \u2605\u2605\u2605 27/02/2017 Previsivelmente Irracional 220 \u2605\u2605\u2605\u2605\u2605 01/06/2017 Subliminar 304 \u2605\u2605\u2605\u2605\u2605 29/12/2017 Outros jeitos de usar a boca 208 \u2605\u2605\u2605\u2605\u2605 30/12/2017 De Primatas a Astronautas 392 \u2605\u2605\u2605\u2605\u2605 01/01/2018 O m\u00ednimo do minimalismo 30 \u2605\u2605\u2605\u2605 01/01/2018 Minimalismo 2.0 32 \u2605\u2605\u2605 01/01/2018 Essencialismo 272 \u2605\u2605\u2605\u2605 01/01/2018 Minimalismo 47 \u2605\u2605\u2605 01/01/2018 O Gene Ego\u00edsta 544 \u2605\u2605\u2605\u2605\u2605 06/01/2018 Viagens de Gulliver 275 \u2605\u2605\u2605\u2605 07/01/2018 Vida Frugal 39 \u2605\u2605\u2605\u2605 20/08/2018 31 Dias Para Superar Seu Medo de Fazer Fotografia de Rua 50 \u2605\u2605\u2605 10/10/2018 L\u00e1 vem todo mundo 296 \u2605\u2605\u2605 28/01/2019 O Poder do H\u00e1bito 407 \u2605\u2605\u2605\u2605 11/12/2019 A Base Moral do Vegetarismo 64 \u2605\u2605\u2605 31/12/2019 Maus 296 \u2605\u2605\u2605\u2605\u2605 01/02/2019 As leis do acaso 304 \u2605\u2605\u2605\u2605 10/02/2020 Python 197 \u2605\u2605\u2605 25/07/2020 Sapiens 462 \u2605\u2605\u2605\u2605 10/04/2020 Homo Deus 448 \u2605\u2605\u2605\u2605 20/04/2020 Dom Casmurro 238 \u2605\u2605\u2605\u2605 05/05/2020 Mem\u00f3rias P\u00f3stumas de Br\u00e1s Cubas 224 \u2605\u2605\u2605 16/05/2020 O Universo Numa Casca de Noz 215 \u2605\u2605\u2605\u2605\u2605 11/07/2020 Dom Quixote 111 \u2605\u2605\u2605\u2605\u2605 25/07/2020 Uma Breve Hist\u00f3ria do Tempo 256 \u2605\u2605\u2605\u2605\u2605 26/07/2020 Uma nova hist\u00f3ria do tempo 224 \u2605\u2605\u2605\u2605\u2605 29/07/2020 Breves Respostas Para Grandes Quest\u00f5es 256 \u2605\u2605\u2605\u2605 01/08/2020 O Estrangeiro 126 \u2605\u2605\u2605\u2605 24/10/2020 A Arte Cavalheiresca do Arqueiro Zen 91 \u2605\u2605\u2605 01/11/2020 Sapiens: O nascimento da humanidade: 1 248 \u2605\u2605\u2605 09/02/2021 A arte de fazer acontecer 320 \u2605\u2605\u2605 08/02/2021 Estilo de Vida Minimalista 51 \u2605\u2605\u2605 30/01/2021","title":"Livros"},{"location":"listas/donation/","text":"Doa\u00e7\u00f5es Se se interessar por algo, pode me contactar atrav\u00e9s dos links de contato no final da p\u00e1gina. dependendo do quanto voc\u00ea queira, eu posso te dar o \u00edtem (claro que toda a log\u00edstica para entrega fica por sua conta); Livros o pr\u00edncipe viagens de Gulliver robotics and Control introdu\u00e7\u00e3o ao HTML5 openMind Essential + CD (token ainda v\u00e1lido) new english File programando o Raspberry Pi construindo aplica\u00e7\u00f5es web com PHP e MySQL de onde v\u00eam as boas ideias redes neurais: Fundamentos e Aplica\u00e7\u00f5es Itens variados pau de selfie (sem o controle nem o suporte para celular) lente de aumento para celular (8x) \u00f3culos vr box 2.0 (realidade virtual) trip\u00e9 para celular (sem o celular nem o suporte para celular)","title":"Doa\u00e7\u00f5es"},{"location":"listas/donation/#doacoes","text":"Se se interessar por algo, pode me contactar atrav\u00e9s dos links de contato no final da p\u00e1gina. dependendo do quanto voc\u00ea queira, eu posso te dar o \u00edtem (claro que toda a log\u00edstica para entrega fica por sua conta);","title":"Doa\u00e7\u00f5es"},{"location":"listas/donation/#livros","text":"o pr\u00edncipe viagens de Gulliver robotics and Control introdu\u00e7\u00e3o ao HTML5 openMind Essential + CD (token ainda v\u00e1lido) new english File programando o Raspberry Pi construindo aplica\u00e7\u00f5es web com PHP e MySQL de onde v\u00eam as boas ideias redes neurais: Fundamentos e Aplica\u00e7\u00f5es","title":" Livros"},{"location":"listas/donation/#itens-variados","text":"pau de selfie (sem o controle nem o suporte para celular) lente de aumento para celular (8x) \u00f3culos vr box 2.0 (realidade virtual) trip\u00e9 para celular (sem o celular nem o suporte para celular)","title":" Itens variados"},{"location":"listas/movies/","text":"Filmes","title":"Filmes"},{"location":"listas/movies/#filmes","text":"","title":"Filmes"},{"location":"listas/papers/","text":"Artigos Titulo Ano Nota Anomaly Detection with Density Estimation 2020 Normalizing Flows for Probabilistic Modeling and Inference 2021 Sylvester Normalizing Flows for Variational Inference 2018 Neural Spline Flows 2019 Residual Flows for Invertible Generative Modeling 2020 Deep Residual Flow for Novelty Detection 2020 Do Deep Generative Models Know What They Don't Know? 2019 WAIC, but Why? Generative Ensembles for Robust Anomaly Detection 2019 Towards Out-of-Distribution Detection with Divergence Guarantee in Deep Generative Models 2019 Out-of-Distribution Detection with Distance Guarantee in Deep Generative Models 2021 Likelihood Regret: An Out-of-Distribution Detection Score For Variational Auto-encoder 2020 Block Neural Autoregressive Flow 2019 MaCow: Masked Convolutional Generative Flow 2019 Normalizing Flows for Probabilistic Modeling and Inference 2021 Artificial Neural Networks Applied to Taxi Destination Prediction 2015 Deep Generative Models Strike Back! Improving Understanding and Evaluation in Light of Unmet Expectations for OoD Data 2019 Likelihood Assignment for Out-of-Distribution Inputs in Deep Generative Models is Sensitive to Prior Distribution Choice 2019 Rethinking Assumptions in Deep Anomaly Detection 2021 The Expressive Power of a Class of Normalizing Flow Models 2020 Graphical Normalizing Flows 2021 Why Normalizing Flows Fail to Detect Out-of-Distribution Data 2020 Robust model training and generalisation with Studentising flows 2020 Deep Learning for Anomaly Detection: A Review 2020 SurVAE Flows: Surjections to Bridge the Gap between VAEs and Flows 2020 Semi-supervised Learning with Deep Generative Models 2014 Semi-Supervised Learning with Normalizing Flows 2019 Semi-Conditional Normalizing Flows for Semi-Supervised Learning 2020 OneFlow: One-class flow for anomaly detection based on a minimal volume region 2021 A Survey on Anomaly Detection for Technical Systems using LSTM Networks 2021 Likelihood Ratios for Out-of-Distribution Detection 2019 A Unifying Review of Deep and Shallow Anomaly Detection 2021 Understanding Failures in Out-of-Distribution Detection with Deep Generative Models 2021 An Evaluation of Anomaly Detection and Diagnosis in Multivariate Time Series 2021 Fully Convolutional Cross-Scale-Flows for Image-based Defect Detection 2021 NFAD: fixing anomaly detection using normalizing flows 2021 Principal Manifold Flows 2022 PAC Guarantees and Effective Algorithms for Detecting Novel Categories 2022 Reward Once, Penalize Once: Rectifying Time Series Anomaly Detection 2022","title":"Artigos"},{"location":"listas/papers/#artigos","text":"Titulo Ano Nota Anomaly Detection with Density Estimation 2020 Normalizing Flows for Probabilistic Modeling and Inference 2021 Sylvester Normalizing Flows for Variational Inference 2018 Neural Spline Flows 2019 Residual Flows for Invertible Generative Modeling 2020 Deep Residual Flow for Novelty Detection 2020 Do Deep Generative Models Know What They Don't Know? 2019 WAIC, but Why? Generative Ensembles for Robust Anomaly Detection 2019 Towards Out-of-Distribution Detection with Divergence Guarantee in Deep Generative Models 2019 Out-of-Distribution Detection with Distance Guarantee in Deep Generative Models 2021 Likelihood Regret: An Out-of-Distribution Detection Score For Variational Auto-encoder 2020 Block Neural Autoregressive Flow 2019 MaCow: Masked Convolutional Generative Flow 2019 Normalizing Flows for Probabilistic Modeling and Inference 2021 Artificial Neural Networks Applied to Taxi Destination Prediction 2015 Deep Generative Models Strike Back! Improving Understanding and Evaluation in Light of Unmet Expectations for OoD Data 2019 Likelihood Assignment for Out-of-Distribution Inputs in Deep Generative Models is Sensitive to Prior Distribution Choice 2019 Rethinking Assumptions in Deep Anomaly Detection 2021 The Expressive Power of a Class of Normalizing Flow Models 2020 Graphical Normalizing Flows 2021 Why Normalizing Flows Fail to Detect Out-of-Distribution Data 2020 Robust model training and generalisation with Studentising flows 2020 Deep Learning for Anomaly Detection: A Review 2020 SurVAE Flows: Surjections to Bridge the Gap between VAEs and Flows 2020 Semi-supervised Learning with Deep Generative Models 2014 Semi-Supervised Learning with Normalizing Flows 2019 Semi-Conditional Normalizing Flows for Semi-Supervised Learning 2020 OneFlow: One-class flow for anomaly detection based on a minimal volume region 2021 A Survey on Anomaly Detection for Technical Systems using LSTM Networks 2021 Likelihood Ratios for Out-of-Distribution Detection 2019 A Unifying Review of Deep and Shallow Anomaly Detection 2021 Understanding Failures in Out-of-Distribution Detection with Deep Generative Models 2021 An Evaluation of Anomaly Detection and Diagnosis in Multivariate Time Series 2021 Fully Convolutional Cross-Scale-Flows for Image-based Defect Detection 2021 NFAD: fixing anomaly detection using normalizing flows 2021 Principal Manifold Flows 2022 PAC Guarantees and Effective Algorithms for Detecting Novel Categories 2022 Reward Once, Penalize Once: Rectifying Time Series Anomaly Detection 2022","title":"Artigos"},{"location":"listas/discos/","text":"Discos Info Artista Album Ano Belchior Alucina\u00e7\u00e3o 1976 Dire Straits Money for Nothing 1988 Pholhas Disco de Ouro 1977 Raul Seixas Metamorfose Ambulante 1988 The Beatles The Beatles Ballads 1980","title":"Discos"},{"location":"listas/discos/#discos","text":"Info Artista Album Ano Belchior Alucina\u00e7\u00e3o 1976 Dire Straits Money for Nothing 1988 Pholhas Disco de Ouro 1977 Raul Seixas Metamorfose Ambulante 1988 The Beatles The Beatles Ballads 1980","title":"Discos"},{"location":"listas/discos/belchior-alucinacao/","text":"Belchior - Alucina\u00e7\u00e3o (1976) Ficha t\u00e9cnica Artista : Belchior \u00c1lbum : Alucina\u00e7\u00e3o Ano : 1976 G\u00eaneros : MPB, Blues, Country, Bai\u00e3o, Rock Dura\u00e7\u00e3o : 00:37:32 Gravadora : PolyGram Produ\u00e7\u00e3o : Marco Mazzola Faixas N\u00ba T\u00edtulo Dura\u00e7\u00e3o Estado Letra A1 Apenas um Rapaz Latino-Americano 4:17 A2 Velha Roupa Colorida 4:49 A3 Como Nossos Pais 4:41 A4 Sujeito de Sorte 3:56 A5 Como o Diabo Gosta 2:33 B1 Alucina\u00e7\u00e3o 4:52 B2 N\u00e3o Leve Flores 4:11 B3 \u00c0 Palo Seco 2:56 B4 Fotografia 3x4 5:27 B5 Antes do Fim 0:59","title":"Belchior - Alucina\u00e7\u00e3o (1976)"},{"location":"listas/discos/belchior-alucinacao/#belchior-alucinacao-1976","text":"","title":"Belchior - Alucina\u00e7\u00e3o (1976)"},{"location":"listas/discos/belchior-alucinacao/#ficha-tecnica","text":"Artista : Belchior \u00c1lbum : Alucina\u00e7\u00e3o Ano : 1976 G\u00eaneros : MPB, Blues, Country, Bai\u00e3o, Rock Dura\u00e7\u00e3o : 00:37:32 Gravadora : PolyGram Produ\u00e7\u00e3o : Marco Mazzola","title":"Ficha t\u00e9cnica"},{"location":"listas/discos/belchior-alucinacao/#faixas","text":"N\u00ba T\u00edtulo Dura\u00e7\u00e3o Estado Letra A1 Apenas um Rapaz Latino-Americano 4:17 A2 Velha Roupa Colorida 4:49 A3 Como Nossos Pais 4:41 A4 Sujeito de Sorte 3:56 A5 Como o Diabo Gosta 2:33 B1 Alucina\u00e7\u00e3o 4:52 B2 N\u00e3o Leve Flores 4:11 B3 \u00c0 Palo Seco 2:56 B4 Fotografia 3x4 5:27 B5 Antes do Fim 0:59","title":"Faixas"},{"location":"listas/discos/dire-straits-money-for-nothing/","text":"Dire Straits - Money for Nothing (1988) Ficha t\u00e9cnica Artista : Dire Straits \u00c1lbum : Money for nothing Ano : 1988 G\u00eaneros : Blues Rock, Folk Rock, Pop Rock Dura\u00e7\u00e3o : 00:54:14 Gravadora : Phonogram Produ\u00e7\u00e3o : Mark Knopfler Faixas N\u00ba T\u00edtulo Dura\u00e7\u00e3o Estado Letra A1 Sultans of Swing 5:46 A2 Down to the Waterline 4:00 A3 Portobello Belle (live) 4:33 A4 Twisting by the Pool (Remix) 3:30 A5 Romeo and Juliet 5:57 A6 Where Do You Think You're Going? 3:31 B1 Walk of Life 4:07 B2 Private Investigations 5:48 B3 Money for Nothing 4:05 B4 Tunnel of Love 8:09 B5 Brothers in Arms 4:48","title":"Dire Straits - Money for Nothing (1988)"},{"location":"listas/discos/dire-straits-money-for-nothing/#dire-straits-money-for-nothing-1988","text":"","title":"Dire Straits - Money for Nothing (1988)"},{"location":"listas/discos/dire-straits-money-for-nothing/#ficha-tecnica","text":"Artista : Dire Straits \u00c1lbum : Money for nothing Ano : 1988 G\u00eaneros : Blues Rock, Folk Rock, Pop Rock Dura\u00e7\u00e3o : 00:54:14 Gravadora : Phonogram Produ\u00e7\u00e3o : Mark Knopfler","title":"Ficha t\u00e9cnica"},{"location":"listas/discos/dire-straits-money-for-nothing/#faixas","text":"N\u00ba T\u00edtulo Dura\u00e7\u00e3o Estado Letra A1 Sultans of Swing 5:46 A2 Down to the Waterline 4:00 A3 Portobello Belle (live) 4:33 A4 Twisting by the Pool (Remix) 3:30 A5 Romeo and Juliet 5:57 A6 Where Do You Think You're Going? 3:31 B1 Walk of Life 4:07 B2 Private Investigations 5:48 B3 Money for Nothing 4:05 B4 Tunnel of Love 8:09 B5 Brothers in Arms 4:48","title":"Faixas"},{"location":"listas/discos/pholhas-disco-de-ouro/","text":"Pholhas - Disco de Ouro (1977) Ficha t\u00e9cnica Artista : Pholhas \u00c1lbum : Disco de Ouro Ano : 1977 G\u00eaneros : Rock, Pop Dura\u00e7\u00e3o : 00:44:12 Gravadora : RCA Produ\u00e7\u00e3o : - Faixas N\u00ba T\u00edtulo Dura\u00e7\u00e3o Estado Letra A1 My Mistake 3:07 A2 Forever 3:26 A3 The Other One 3:12 A4 I'm Down 3:28 A5 Shadow Of Love 3:22 A6 My Sorrow 3:10 A7 In My Way 3:28 B1 She Made Me Cry 3:15 B2 I Never Did Before (Mr. X) 2:53 B3 Anymore 2:44 B4 Special Girl 3:10 B5 Sunshine 4:20 B6 Get Back 2:37 B7 Dead Faces 2:00","title":"Pholhas - Disco de Ouro (1977)"},{"location":"listas/discos/pholhas-disco-de-ouro/#pholhas-disco-de-ouro-1977","text":"","title":"Pholhas - Disco de Ouro (1977)"},{"location":"listas/discos/pholhas-disco-de-ouro/#ficha-tecnica","text":"Artista : Pholhas \u00c1lbum : Disco de Ouro Ano : 1977 G\u00eaneros : Rock, Pop Dura\u00e7\u00e3o : 00:44:12 Gravadora : RCA Produ\u00e7\u00e3o : -","title":"Ficha t\u00e9cnica"},{"location":"listas/discos/pholhas-disco-de-ouro/#faixas","text":"N\u00ba T\u00edtulo Dura\u00e7\u00e3o Estado Letra A1 My Mistake 3:07 A2 Forever 3:26 A3 The Other One 3:12 A4 I'm Down 3:28 A5 Shadow Of Love 3:22 A6 My Sorrow 3:10 A7 In My Way 3:28 B1 She Made Me Cry 3:15 B2 I Never Did Before (Mr. X) 2:53 B3 Anymore 2:44 B4 Special Girl 3:10 B5 Sunshine 4:20 B6 Get Back 2:37 B7 Dead Faces 2:00","title":"Faixas"},{"location":"listas/discos/raul-seixas-metamorfose-ambulante/","text":"Raul Seixas - Metamorfose Ambulante (1988) Ficha t\u00e9cnica Artista : Raul Seixas \u00c1lbum : Metamorfose Ambulante Ano : 1988 G\u00eaneros : Rock, Blues, Folk, World, & Country Dura\u00e7\u00e3o : 00:36:42 Gravadora : Polygram Produ\u00e7\u00e3o : - Faixas N\u00ba T\u00edtulo Dura\u00e7\u00e3o Estado Letra A1 Ouro De Tolo 2:52 A2 Eu Nasci H\u00e1 10 Mil Anos Atr\u00e1s 4:51 A3 Mosca Na Sopa 3:59 A4 S.O.S 3:07 A5 Eu Tamb\u00e9m Vou Reclamar 3:23 B1 Git\u00e3 2:22 B2 Tente Outra Vez 4:51 B3 Metamorfose Ambulante 3:49 B4 Al Capone 2:39 B5 Rock Do Diabo 2:10 B6 O Trem Das 7 2:39","title":"Raul Seixas - Metamorfose Ambulante (1988)"},{"location":"listas/discos/raul-seixas-metamorfose-ambulante/#raul-seixas-metamorfose-ambulante-1988","text":"","title":"Raul Seixas - Metamorfose Ambulante (1988)"},{"location":"listas/discos/raul-seixas-metamorfose-ambulante/#ficha-tecnica","text":"Artista : Raul Seixas \u00c1lbum : Metamorfose Ambulante Ano : 1988 G\u00eaneros : Rock, Blues, Folk, World, & Country Dura\u00e7\u00e3o : 00:36:42 Gravadora : Polygram Produ\u00e7\u00e3o : -","title":"Ficha t\u00e9cnica"},{"location":"listas/discos/raul-seixas-metamorfose-ambulante/#faixas","text":"N\u00ba T\u00edtulo Dura\u00e7\u00e3o Estado Letra A1 Ouro De Tolo 2:52 A2 Eu Nasci H\u00e1 10 Mil Anos Atr\u00e1s 4:51 A3 Mosca Na Sopa 3:59 A4 S.O.S 3:07 A5 Eu Tamb\u00e9m Vou Reclamar 3:23 B1 Git\u00e3 2:22 B2 Tente Outra Vez 4:51 B3 Metamorfose Ambulante 3:49 B4 Al Capone 2:39 B5 Rock Do Diabo 2:10 B6 O Trem Das 7 2:39","title":"Faixas"},{"location":"listas/discos/the-beatles-the-beatles-ballads/","text":"The Beatles - The Beatles Ballads (1980) Ficha t\u00e9cnica Artista : The Beatles \u00c1lbum : The Beatles Ballads Ano : 1980 G\u00eaneros : Rock Dura\u00e7\u00e3o : 57:28 Gravadora : Parlophone Produ\u00e7\u00e3o : George Martin, Phil Spector Faixas N\u00ba T\u00edtulo Dura\u00e7\u00e3o Estado Letra A1 Yesterday 2:02 A2 Norwegian Wood 2:01 A3 Do You Want To Know A Secret 1:55 A4 For No One 1:57 A5 Michelle 2:40 A6 Nowhere Man 2:41 A7 You've Got To Hide Your Love Away 2:06 A8 Across The Universe 3:43 A9 All My Loving 2:05 A10 Hey Jude 7:05 B1 Something 2:59 B2 The Fool On The Hill 2:55 B3 Till There Was You 2:11 B4 The Long And Winding Road 3:35 B5 Here Comes The Sun 3:03 B6 Blackbird 2:19 B7 And I Love Her 2:28 B8 She's Leaving Home 3:35 B9 Here, There And Everywhere 2:21 B10 Let It Be 3:47","title":"The Beatles - The Beatles Ballads (1980)"},{"location":"listas/discos/the-beatles-the-beatles-ballads/#the-beatles-the-beatles-ballads-1980","text":"","title":"The Beatles - The Beatles Ballads (1980)"},{"location":"listas/discos/the-beatles-the-beatles-ballads/#ficha-tecnica","text":"Artista : The Beatles \u00c1lbum : The Beatles Ballads Ano : 1980 G\u00eaneros : Rock Dura\u00e7\u00e3o : 57:28 Gravadora : Parlophone Produ\u00e7\u00e3o : George Martin, Phil Spector","title":"Ficha t\u00e9cnica"},{"location":"listas/discos/the-beatles-the-beatles-ballads/#faixas","text":"N\u00ba T\u00edtulo Dura\u00e7\u00e3o Estado Letra A1 Yesterday 2:02 A2 Norwegian Wood 2:01 A3 Do You Want To Know A Secret 1:55 A4 For No One 1:57 A5 Michelle 2:40 A6 Nowhere Man 2:41 A7 You've Got To Hide Your Love Away 2:06 A8 Across The Universe 3:43 A9 All My Loving 2:05 A10 Hey Jude 7:05 B1 Something 2:59 B2 The Fool On The Hill 2:55 B3 Till There Was You 2:11 B4 The Long And Winding Road 3:35 B5 Here Comes The Sun 3:03 B6 Blackbird 2:19 B7 And I Love Her 2:28 B8 She's Leaving Home 3:35 B9 Here, There And Everywhere 2:21 B10 Let It Be 3:47","title":"Faixas"},{"location":"projetos/","text":"Projetos fuzzy-c-means Constru\u00e7\u00e3o e disponibiliza\u00e7\u00e3o de uma biblioteca Python que implementa o algoritmo de agrupamento de dados Fuzzy C-means, al\u00e9m de notebooks com exemplos de uso da mesma. Bicicletar Implementa\u00e7\u00e3o e disponibiliza\u00e7\u00e3o de um site com um conjunto de visualiza\u00e7\u00f5es e insights a respeito do Sistema de Bicicletas P\u00fablicas Bicicletar da cidade de Fortaleza, com dados de 2014 at\u00e9 2017. scikit-mlm Constru\u00e7\u00e3o e disponibiliza\u00e7\u00e3o de uma biblioteca Python que implementa o modelo de aprendizado de m\u00e1quina minimal learning machine (MLM) e suas varia\u00e7\u00f5es. Tal biblioteca foi implementada como suporte ao artigo Parsimonious Minimal Learning Machine via Multiresponse Sparse Regression . Vanilla Data Science (VDS) Constru\u00e7\u00e3o e disponibiliza\u00e7\u00e3o de um reposit\u00f3rio contento um conjunto de notebooks e trechos de c\u00f3digo utilizados em problemas cotidianos de Ci\u00eancia de Dados. Contribui\u00e7\u00e3o em outros projetos Contribui\u00e7\u00e3o em v\u00e1rios projetos/reposit\u00f3rios privados e alguns p\u00fablicos que envolvem Ci\u00eancia de Dados e aprendizado de m\u00e1quina atrav\u00e9s do github. Desde 2019, foram efetuados mais de 1231 contribui\u00e7\u00f5es (commits, issues, pull requests, code reviews) em reposit\u00f3rios p\u00fablicos e privados. Abaixo segue uma lista dos reposit\u00f3rios p\u00fablicos. zealberth/lssvr romulofff/tutorial-opencv omadson/mrsr","title":"Projetos"},{"location":"projetos/#projetos","text":"","title":"Projetos"},{"location":"projetos/#fuzzy-c-means","text":"Constru\u00e7\u00e3o e disponibiliza\u00e7\u00e3o de uma biblioteca Python que implementa o algoritmo de agrupamento de dados Fuzzy C-means, al\u00e9m de notebooks com exemplos de uso da mesma.","title":" fuzzy-c-means"},{"location":"projetos/#bicicletar","text":"Implementa\u00e7\u00e3o e disponibiliza\u00e7\u00e3o de um site com um conjunto de visualiza\u00e7\u00f5es e insights a respeito do Sistema de Bicicletas P\u00fablicas Bicicletar da cidade de Fortaleza, com dados de 2014 at\u00e9 2017.","title":" Bicicletar"},{"location":"projetos/#scikit-mlm","text":"Constru\u00e7\u00e3o e disponibiliza\u00e7\u00e3o de uma biblioteca Python que implementa o modelo de aprendizado de m\u00e1quina minimal learning machine (MLM) e suas varia\u00e7\u00f5es. Tal biblioteca foi implementada como suporte ao artigo Parsimonious Minimal Learning Machine via Multiresponse Sparse Regression .","title":" scikit-mlm"},{"location":"projetos/#vanilla-data-science-vds","text":"Constru\u00e7\u00e3o e disponibiliza\u00e7\u00e3o de um reposit\u00f3rio contento um conjunto de notebooks e trechos de c\u00f3digo utilizados em problemas cotidianos de Ci\u00eancia de Dados.","title":" Vanilla Data Science (VDS)"},{"location":"projetos/#contribuicao-em-outros-projetos","text":"Contribui\u00e7\u00e3o em v\u00e1rios projetos/reposit\u00f3rios privados e alguns p\u00fablicos que envolvem Ci\u00eancia de Dados e aprendizado de m\u00e1quina atrav\u00e9s do github. Desde 2019, foram efetuados mais de 1231 contribui\u00e7\u00f5es (commits, issues, pull requests, code reviews) em reposit\u00f3rios p\u00fablicos e privados. Abaixo segue uma lista dos reposit\u00f3rios p\u00fablicos. zealberth/lssvr romulofff/tutorial-opencv omadson/mrsr","title":" Contribui\u00e7\u00e3o em outros projetos"},{"location":"sobre/","text":"Sobre Eu me chamo Madson Dias , moro em Fortaleza, Cear\u00e1, Brazil. Tenho mestrado (2017) em Ci\u00eancia da Computa\u00e7\u00e3o pelo Instituto Federal do Cear\u00e1 (IFCE). Atualmente estou cursando doutorado tamb\u00e9m em Ci\u00eancia da Computa\u00e7\u00e3o na Universidade Federal do Cear\u00e1 (UFC). Participo do grupo de pesquisa de L\u00f3gica e Intelig\u00eancia Artificial (LogIA) da UFC, no departamento de computa\u00e7\u00e3o. L\u00e1, trabalho sobre supervis\u00e3o do professor C\u00e9sar Lincoln Cavalcante Mattos . Artigo mais recente: Anomaly Detection in Trajectory Data with Normalizing Flows Me pergunte sobre Python , ci\u00eancia de dados , e aprendizado de m\u00e1quina Coisas que eu gosto: cicicletas , fotografia , caf\u00e9 and leitura Fato engra\u00e7ado: Eu tenho daltonismo e heterocromia","title":"Sobre"},{"location":"sobre/#sobre","text":"Eu me chamo Madson Dias , moro em Fortaleza, Cear\u00e1, Brazil. Tenho mestrado (2017) em Ci\u00eancia da Computa\u00e7\u00e3o pelo Instituto Federal do Cear\u00e1 (IFCE). Atualmente estou cursando doutorado tamb\u00e9m em Ci\u00eancia da Computa\u00e7\u00e3o na Universidade Federal do Cear\u00e1 (UFC). Participo do grupo de pesquisa de L\u00f3gica e Intelig\u00eancia Artificial (LogIA) da UFC, no departamento de computa\u00e7\u00e3o. L\u00e1, trabalho sobre supervis\u00e3o do professor C\u00e9sar Lincoln Cavalcante Mattos . Artigo mais recente: Anomaly Detection in Trajectory Data with Normalizing Flows Me pergunte sobre Python , ci\u00eancia de dados , e aprendizado de m\u00e1quina Coisas que eu gosto: cicicletas , fotografia , caf\u00e9 and leitura Fato engra\u00e7ado: Eu tenho daltonismo e heterocromia","title":"Sobre"},{"location":"sobre/about/","text":"About (en) I'm Madson Dias , I'm from Fortaleza, Cear\u00e1, Brazil . I have an MSc degree (2017) in Computer Science from Federal Institute of Cear\u00e1 and currently, I'm pursuing a doctorate in Computer Science at Federal University of Cear\u00e1 (UFC). I'm an associate researcher at the Logic and Artificial Intelligence Research Group ( LogIA ) at the Department of Computer Science, UFC. There I work under the supervision of Prof. C\u00e9sar Lincoln Cavalcante Mattos . My most recent paper: Anomaly Detection in Trajectory Data with Normalizing Flows Ask me about Python , data science , and machine learning Things that I like: cycling , photography , coffee and reading Fun fact: I have color blindness and heterochromia","title":"About (en)"},{"location":"sobre/about/#about-en","text":"I'm Madson Dias , I'm from Fortaleza, Cear\u00e1, Brazil . I have an MSc degree (2017) in Computer Science from Federal Institute of Cear\u00e1 and currently, I'm pursuing a doctorate in Computer Science at Federal University of Cear\u00e1 (UFC). I'm an associate researcher at the Logic and Artificial Intelligence Research Group ( LogIA ) at the Department of Computer Science, UFC. There I work under the supervision of Prof. C\u00e9sar Lincoln Cavalcante Mattos . My most recent paper: Anomaly Detection in Trajectory Data with Normalizing Flows Ask me about Python , data science , and machine learning Things that I like: cycling , photography , coffee and reading Fun fact: I have color blindness and heterochromia","title":"About (en)"}]}